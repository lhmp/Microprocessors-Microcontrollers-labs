
NUCLEO-F103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080039b8  080039b8  000139b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a64  08003a64  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  08003a64  08003a64  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a64  08003a64  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a64  08003a64  00013a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a68  08003a68  00013a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08003a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200000e0  08003b4c  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08003b4c  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101b1  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002294  00000000  00000000  000302ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00032550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c30  00000000  00000000  00033270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001886b  00000000  00000000  00033ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fdb0  00000000  00000000  0004c70b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b2d6  00000000  00000000  0005c4bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7791  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a2c  00000000  00000000  000e77e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e0 	.word	0x200000e0
 8000128:	00000000 	.word	0x00000000
 800012c:	080039a0 	.word	0x080039a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e4 	.word	0x200000e4
 8000148:	080039a0 	.word	0x080039a0

0800014c <subKeyProcess>:
int TimeOutForKeyPress[BUTTON_COUNT] = {KEY_TIMED_OUT};
int button_flag[BUTTON_COUNT] = {0}; //Init button flag to 0
int button_long_flag[BUTTON_COUNT] = {0};

void subKeyProcess(int index) //Used to set button at index flag
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <subKeyProcess+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2101      	movs	r1, #1
 800015a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800015e:	bf00      	nop
 8000160:	370c      	adds	r7, #12
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	200000fc 	.word	0x200000fc

0800016c <isButtonPressed>:
{
	button_long_flag[index] = 1;
}

int isButtonPressed(int index) //Check button at index is pressed or not
{
 800016c:	b480      	push	{r7}
 800016e:	b083      	sub	sp, #12
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000174:	4a09      	ldr	r2, [pc, #36]	; (800019c <isButtonPressed+0x30>)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d106      	bne.n	800018e <isButtonPressed+0x22>
		button_flag[index] = 0; //Reset flag
 8000180:	4a06      	ldr	r2, [pc, #24]	; (800019c <isButtonPressed+0x30>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2100      	movs	r1, #0
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800018a:	2301      	movs	r3, #1
 800018c:	e000      	b.n	8000190 <isButtonPressed+0x24>
	}
	else return 0;
 800018e:	2300      	movs	r3, #0
}
 8000190:	4618      	mov	r0, r3
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	200000fc 	.word	0x200000fc

080001a0 <getKeyInput>:
}

GPIO_TypeDef* buttonPorts[] = {GPIOA, GPIOA, GPIOC};
uint16_t buttonPins[] = {GPIO_PIN_9, GPIO_PIN_8, GPIO_PIN_7};
void getKeyInput()
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < BUTTON_COUNT; i++)
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e076      	b.n	800029a <getKeyInput+0xfa>
	{
		KeyReg0[i] = KeyReg1[i];
 80001ac:	4a3f      	ldr	r2, [pc, #252]	; (80002ac <getKeyInput+0x10c>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	493e      	ldr	r1, [pc, #248]	; (80002b0 <getKeyInput+0x110>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001bc:	4a3d      	ldr	r2, [pc, #244]	; (80002b4 <getKeyInput+0x114>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4939      	ldr	r1, [pc, #228]	; (80002ac <getKeyInput+0x10c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = HAL_GPIO_ReadPin(buttonPorts[i], buttonPins[i]);
 80001cc:	4a3a      	ldr	r2, [pc, #232]	; (80002b8 <getKeyInput+0x118>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d4:	4939      	ldr	r1, [pc, #228]	; (80002bc <getKeyInput+0x11c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001dc:	4619      	mov	r1, r3
 80001de:	4610      	mov	r0, r2
 80001e0:	f001 faa2 	bl	8001728 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4a32      	ldr	r2, [pc, #200]	; (80002b4 <getKeyInput+0x114>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//Debouncing
		if((KeyReg1[i] == KeyReg0[i])
 80001f0:	4a2e      	ldr	r2, [pc, #184]	; (80002ac <getKeyInput+0x10c>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	492d      	ldr	r1, [pc, #180]	; (80002b0 <getKeyInput+0x110>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000200:	429a      	cmp	r2, r3
 8000202:	d147      	bne.n	8000294 <getKeyInput+0xf4>
		&&(KeyReg1[i] == KeyReg2[i])) //If all 3 registers have the same values
 8000204:	4a29      	ldr	r2, [pc, #164]	; (80002ac <getKeyInput+0x10c>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4929      	ldr	r1, [pc, #164]	; (80002b4 <getKeyInput+0x114>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d13d      	bne.n	8000294 <getKeyInput+0xf4>
		{
			if(KeyReg3[i] != KeyReg2[i])
 8000218:	4a29      	ldr	r2, [pc, #164]	; (80002c0 <getKeyInput+0x120>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4924      	ldr	r1, [pc, #144]	; (80002b4 <getKeyInput+0x114>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d016      	beq.n	800025a <getKeyInput+0xba>
			{
				KeyReg3[i] = KeyReg2[i];
 800022c:	4a21      	ldr	r2, [pc, #132]	; (80002b4 <getKeyInput+0x114>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	4922      	ldr	r1, [pc, #136]	; (80002c0 <getKeyInput+0x120>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if(KeyReg2[i] == PRESSED_STATE)
 800023c:	4a1d      	ldr	r2, [pc, #116]	; (80002b4 <getKeyInput+0x114>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d125      	bne.n	8000294 <getKeyInput+0xf4>
				{
					subKeyProcess(i);
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f7ff ff7f 	bl	800014c <subKeyProcess>
					TimeOutForKeyPress[i] = KEY_TIMED_OUT;
 800024e:	4a1d      	ldr	r2, [pc, #116]	; (80002c4 <getKeyInput+0x124>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2164      	movs	r1, #100	; 0x64
 8000254:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000258:	e01c      	b.n	8000294 <getKeyInput+0xf4>
				}
			}
			else
			{
				TimeOutForKeyPress[i]--;
 800025a:	4a1a      	ldr	r2, [pc, #104]	; (80002c4 <getKeyInput+0x124>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	1e5a      	subs	r2, r3, #1
 8000264:	4917      	ldr	r1, [pc, #92]	; (80002c4 <getKeyInput+0x124>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 800026c:	4a15      	ldr	r2, [pc, #84]	; (80002c4 <getKeyInput+0x124>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d10d      	bne.n	8000294 <getKeyInput+0xf4>
					if(KeyReg2[i] == PRESSED_STATE)
 8000278:	4a0e      	ldr	r2, [pc, #56]	; (80002b4 <getKeyInput+0x114>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d102      	bne.n	800028a <getKeyInput+0xea>
					{
						subKeyProcess(i);
 8000284:	6878      	ldr	r0, [r7, #4]
 8000286:	f7ff ff61 	bl	800014c <subKeyProcess>
					}
					TimeOutForKeyPress[i] = KEY_TIMED_OUT;
 800028a:	4a0e      	ldr	r2, [pc, #56]	; (80002c4 <getKeyInput+0x124>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2164      	movs	r1, #100	; 0x64
 8000290:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < BUTTON_COUNT; i++)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	3301      	adds	r3, #1
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2b02      	cmp	r3, #2
 800029e:	dd85      	ble.n	80001ac <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	2000000c 	.word	0x2000000c
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000018 	.word	0x20000018
 80002b8:	2000003c 	.word	0x2000003c
 80002bc:	20000048 	.word	0x20000048
 80002c0:	20000024 	.word	0x20000024
 80002c4:	20000030 	.word	0x20000030

080002c8 <fsm_clock_counter>:
int MAX_RED = 5;
int MAX_YELLOW = 2;
int MAX_GREEN = 3;

void fsm_clock_counter()
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0

	if(timer_flag[0] == 1)
 80002cc:	4b11      	ldr	r3, [pc, #68]	; (8000314 <fsm_clock_counter+0x4c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d103      	bne.n	80002dc <fsm_clock_counter+0x14>
	{
		setTimer(100, 0);
 80002d4:	2100      	movs	r1, #0
 80002d6:	2064      	movs	r0, #100	; 0x64
 80002d8:	f000 fe94 	bl	8001004 <setTimer>
	}
	if(timer_flag[1] == 1 && (manual_status == 0))
 80002dc:	4b0d      	ldr	r3, [pc, #52]	; (8000314 <fsm_clock_counter+0x4c>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	2b01      	cmp	r3, #1
 80002e2:	d111      	bne.n	8000308 <fsm_clock_counter+0x40>
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <fsm_clock_counter+0x50>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d10d      	bne.n	8000308 <fsm_clock_counter+0x40>
	{
		clock_counter--;
 80002ec:	4b0b      	ldr	r3, [pc, #44]	; (800031c <fsm_clock_counter+0x54>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	3b01      	subs	r3, #1
 80002f2:	4a0a      	ldr	r2, [pc, #40]	; (800031c <fsm_clock_counter+0x54>)
 80002f4:	6013      	str	r3, [r2, #0]
		clock_counter_1--;
 80002f6:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <fsm_clock_counter+0x58>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	3b01      	subs	r3, #1
 80002fc:	4a08      	ldr	r2, [pc, #32]	; (8000320 <fsm_clock_counter+0x58>)
 80002fe:	6013      	str	r3, [r2, #0]
		setTimer(100, 1);
 8000300:	2101      	movs	r1, #1
 8000302:	2064      	movs	r0, #100	; 0x64
 8000304:	f000 fe7e 	bl	8001004 <setTimer>
	}
	HAL_GPIO_TogglePin(PA5_GPIO_Port, PA5_Pin);
 8000308:	2120      	movs	r1, #32
 800030a:	4806      	ldr	r0, [pc, #24]	; (8000324 <fsm_clock_counter+0x5c>)
 800030c:	f001 fa3b 	bl	8001786 <HAL_GPIO_TogglePin>
}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000128 	.word	0x20000128
 8000318:	20000110 	.word	0x20000110
 800031c:	20000050 	.word	0x20000050
 8000320:	20000054 	.word	0x20000054
 8000324:	40010800 	.word	0x40010800

08000328 <fsm_auto_traffic>:

//FIRST 7SEG OUT0->OUT2 & SEG0->SEG6
void fsm_auto_traffic(){
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	switch(auto_status){
 800032c:	4b37      	ldr	r3, [pc, #220]	; (800040c <fsm_auto_traffic+0xe4>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2b02      	cmp	r3, #2
 8000332:	d044      	beq.n	80003be <fsm_auto_traffic+0x96>
 8000334:	2b02      	cmp	r3, #2
 8000336:	dc66      	bgt.n	8000406 <fsm_auto_traffic+0xde>
 8000338:	2b00      	cmp	r3, #0
 800033a:	d002      	beq.n	8000342 <fsm_auto_traffic+0x1a>
 800033c:	2b01      	cmp	r3, #1
 800033e:	d01f      	beq.n	8000380 <fsm_auto_traffic+0x58>
					  clock_counter = MAX_GREEN;
					  auto_status = 0;
				  }
		break;
	}
}
 8000340:	e061      	b.n	8000406 <fsm_auto_traffic+0xde>
				lcd_goto_XY(0, 6);
 8000342:	2106      	movs	r1, #6
 8000344:	2000      	movs	r0, #0
 8000346:	f000 fbab 	bl	8000aa0 <lcd_goto_XY>
				lcd_send_num(clock_counter);
 800034a:	4b31      	ldr	r3, [pc, #196]	; (8000410 <fsm_auto_traffic+0xe8>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4618      	mov	r0, r3
 8000350:	f000 fb90 	bl	8000a74 <lcd_send_num>
				HAL_GPIO_WritePin(Traffic_light_1_1_GPIO_Port, Traffic_light_1_1_Pin, SET);
 8000354:	2201      	movs	r2, #1
 8000356:	2108      	movs	r1, #8
 8000358:	482e      	ldr	r0, [pc, #184]	; (8000414 <fsm_auto_traffic+0xec>)
 800035a:	f001 f9fc 	bl	8001756 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Traffic_light_1_2_GPIO_Port, Traffic_light_1_2_Pin, RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	2120      	movs	r1, #32
 8000362:	482c      	ldr	r0, [pc, #176]	; (8000414 <fsm_auto_traffic+0xec>)
 8000364:	f001 f9f7 	bl	8001756 <HAL_GPIO_WritePin>
				  if(clock_counter == 0)
 8000368:	4b29      	ldr	r3, [pc, #164]	; (8000410 <fsm_auto_traffic+0xe8>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d145      	bne.n	80003fc <fsm_auto_traffic+0xd4>
					  clock_counter = MAX_YELLOW;
 8000370:	4b29      	ldr	r3, [pc, #164]	; (8000418 <fsm_auto_traffic+0xf0>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a26      	ldr	r2, [pc, #152]	; (8000410 <fsm_auto_traffic+0xe8>)
 8000376:	6013      	str	r3, [r2, #0]
					  auto_status = 1;
 8000378:	4b24      	ldr	r3, [pc, #144]	; (800040c <fsm_auto_traffic+0xe4>)
 800037a:	2201      	movs	r2, #1
 800037c:	601a      	str	r2, [r3, #0]
		break;
 800037e:	e03d      	b.n	80003fc <fsm_auto_traffic+0xd4>
				lcd_goto_XY(0, 6);
 8000380:	2106      	movs	r1, #6
 8000382:	2000      	movs	r0, #0
 8000384:	f000 fb8c 	bl	8000aa0 <lcd_goto_XY>
				lcd_send_num(clock_counter);
 8000388:	4b21      	ldr	r3, [pc, #132]	; (8000410 <fsm_auto_traffic+0xe8>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4618      	mov	r0, r3
 800038e:	f000 fb71 	bl	8000a74 <lcd_send_num>
				HAL_GPIO_WritePin(Traffic_light_1_1_GPIO_Port, Traffic_light_1_1_Pin, RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	2108      	movs	r1, #8
 8000396:	481f      	ldr	r0, [pc, #124]	; (8000414 <fsm_auto_traffic+0xec>)
 8000398:	f001 f9dd 	bl	8001756 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Traffic_light_1_2_GPIO_Port, Traffic_light_1_2_Pin, SET);
 800039c:	2201      	movs	r2, #1
 800039e:	2120      	movs	r1, #32
 80003a0:	481c      	ldr	r0, [pc, #112]	; (8000414 <fsm_auto_traffic+0xec>)
 80003a2:	f001 f9d8 	bl	8001756 <HAL_GPIO_WritePin>
				  if(clock_counter == 0)
 80003a6:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <fsm_auto_traffic+0xe8>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d128      	bne.n	8000400 <fsm_auto_traffic+0xd8>
					  clock_counter = MAX_RED;
 80003ae:	4b1b      	ldr	r3, [pc, #108]	; (800041c <fsm_auto_traffic+0xf4>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4a17      	ldr	r2, [pc, #92]	; (8000410 <fsm_auto_traffic+0xe8>)
 80003b4:	6013      	str	r3, [r2, #0]
					  auto_status = 2;
 80003b6:	4b15      	ldr	r3, [pc, #84]	; (800040c <fsm_auto_traffic+0xe4>)
 80003b8:	2202      	movs	r2, #2
 80003ba:	601a      	str	r2, [r3, #0]
		break;
 80003bc:	e020      	b.n	8000400 <fsm_auto_traffic+0xd8>
				lcd_goto_XY(0, 6);
 80003be:	2106      	movs	r1, #6
 80003c0:	2000      	movs	r0, #0
 80003c2:	f000 fb6d 	bl	8000aa0 <lcd_goto_XY>
				lcd_send_num(clock_counter);
 80003c6:	4b12      	ldr	r3, [pc, #72]	; (8000410 <fsm_auto_traffic+0xe8>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 fb52 	bl	8000a74 <lcd_send_num>
				HAL_GPIO_WritePin(Traffic_light_1_1_GPIO_Port, Traffic_light_1_1_Pin, SET);
 80003d0:	2201      	movs	r2, #1
 80003d2:	2108      	movs	r1, #8
 80003d4:	480f      	ldr	r0, [pc, #60]	; (8000414 <fsm_auto_traffic+0xec>)
 80003d6:	f001 f9be 	bl	8001756 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Traffic_light_1_2_GPIO_Port, Traffic_light_1_2_Pin, SET);
 80003da:	2201      	movs	r2, #1
 80003dc:	2120      	movs	r1, #32
 80003de:	480d      	ldr	r0, [pc, #52]	; (8000414 <fsm_auto_traffic+0xec>)
 80003e0:	f001 f9b9 	bl	8001756 <HAL_GPIO_WritePin>
				  if(clock_counter == 0)
 80003e4:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <fsm_auto_traffic+0xe8>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d10b      	bne.n	8000404 <fsm_auto_traffic+0xdc>
					  clock_counter = MAX_GREEN;
 80003ec:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <fsm_auto_traffic+0xf8>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a07      	ldr	r2, [pc, #28]	; (8000410 <fsm_auto_traffic+0xe8>)
 80003f2:	6013      	str	r3, [r2, #0]
					  auto_status = 0;
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <fsm_auto_traffic+0xe4>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
		break;
 80003fa:	e003      	b.n	8000404 <fsm_auto_traffic+0xdc>
		break;
 80003fc:	bf00      	nop
 80003fe:	e002      	b.n	8000406 <fsm_auto_traffic+0xde>
		break;
 8000400:	bf00      	nop
 8000402:	e000      	b.n	8000406 <fsm_auto_traffic+0xde>
		break;
 8000404:	bf00      	nop
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000108 	.word	0x20000108
 8000410:	20000050 	.word	0x20000050
 8000414:	40010c00 	.word	0x40010c00
 8000418:	20000068 	.word	0x20000068
 800041c:	20000064 	.word	0x20000064
 8000420:	2000006c 	.word	0x2000006c

08000424 <fsm_auto_traffic_1>:

//SECOND 7SEG OUT3->OUT5 & SEG0_1->SEG6_1
void fsm_auto_traffic_1(){
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	switch(auto_status_1){
 8000428:	4b38      	ldr	r3, [pc, #224]	; (800050c <fsm_auto_traffic_1+0xe8>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	2b02      	cmp	r3, #2
 800042e:	d046      	beq.n	80004be <fsm_auto_traffic_1+0x9a>
 8000430:	2b02      	cmp	r3, #2
 8000432:	dc69      	bgt.n	8000508 <fsm_auto_traffic_1+0xe4>
 8000434:	2b00      	cmp	r3, #0
 8000436:	d002      	beq.n	800043e <fsm_auto_traffic_1+0x1a>
 8000438:	2b01      	cmp	r3, #1
 800043a:	d020      	beq.n	800047e <fsm_auto_traffic_1+0x5a>
					  clock_counter_1 = MAX_YELLOW;
					  auto_status_1 = 1;
				  }
		break;
	}
}
 800043c:	e064      	b.n	8000508 <fsm_auto_traffic_1+0xe4>
				lcd_goto_XY(0, 14);
 800043e:	210e      	movs	r1, #14
 8000440:	2000      	movs	r0, #0
 8000442:	f000 fb2d 	bl	8000aa0 <lcd_goto_XY>
				lcd_send_num(clock_counter_1);
 8000446:	4b32      	ldr	r3, [pc, #200]	; (8000510 <fsm_auto_traffic_1+0xec>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4618      	mov	r0, r3
 800044c:	f000 fb12 	bl	8000a74 <lcd_send_num>
				HAL_GPIO_WritePin(Traffic_light_2_1_GPIO_Port, Traffic_light_2_1_Pin, SET);
 8000450:	2201      	movs	r2, #1
 8000452:	2110      	movs	r1, #16
 8000454:	482f      	ldr	r0, [pc, #188]	; (8000514 <fsm_auto_traffic_1+0xf0>)
 8000456:	f001 f97e 	bl	8001756 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Traffic_light_2_2_GPIO_Port, Traffic_light_2_2_Pin, SET);
 800045a:	2201      	movs	r2, #1
 800045c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000460:	482c      	ldr	r0, [pc, #176]	; (8000514 <fsm_auto_traffic_1+0xf0>)
 8000462:	f001 f978 	bl	8001756 <HAL_GPIO_WritePin>
				  if(clock_counter_1 == 0)
 8000466:	4b2a      	ldr	r3, [pc, #168]	; (8000510 <fsm_auto_traffic_1+0xec>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d147      	bne.n	80004fe <fsm_auto_traffic_1+0xda>
					  clock_counter_1 = MAX_GREEN;
 800046e:	4b2a      	ldr	r3, [pc, #168]	; (8000518 <fsm_auto_traffic_1+0xf4>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a27      	ldr	r2, [pc, #156]	; (8000510 <fsm_auto_traffic_1+0xec>)
 8000474:	6013      	str	r3, [r2, #0]
					  auto_status_1 = 2;
 8000476:	4b25      	ldr	r3, [pc, #148]	; (800050c <fsm_auto_traffic_1+0xe8>)
 8000478:	2202      	movs	r2, #2
 800047a:	601a      	str	r2, [r3, #0]
		break;
 800047c:	e03f      	b.n	80004fe <fsm_auto_traffic_1+0xda>
				lcd_goto_XY(0, 14);
 800047e:	210e      	movs	r1, #14
 8000480:	2000      	movs	r0, #0
 8000482:	f000 fb0d 	bl	8000aa0 <lcd_goto_XY>
				lcd_send_num(clock_counter_1);
 8000486:	4b22      	ldr	r3, [pc, #136]	; (8000510 <fsm_auto_traffic_1+0xec>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4618      	mov	r0, r3
 800048c:	f000 faf2 	bl	8000a74 <lcd_send_num>
				HAL_GPIO_WritePin(Traffic_light_2_1_GPIO_Port, Traffic_light_2_1_Pin, RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	2110      	movs	r1, #16
 8000494:	481f      	ldr	r0, [pc, #124]	; (8000514 <fsm_auto_traffic_1+0xf0>)
 8000496:	f001 f95e 	bl	8001756 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Traffic_light_2_2_GPIO_Port, Traffic_light_2_2_Pin, SET);
 800049a:	2201      	movs	r2, #1
 800049c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004a0:	481c      	ldr	r0, [pc, #112]	; (8000514 <fsm_auto_traffic_1+0xf0>)
 80004a2:	f001 f958 	bl	8001756 <HAL_GPIO_WritePin>
				  if(clock_counter_1 == 0)
 80004a6:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <fsm_auto_traffic_1+0xec>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d129      	bne.n	8000502 <fsm_auto_traffic_1+0xde>
					  clock_counter_1 = MAX_RED;
 80004ae:	4b1b      	ldr	r3, [pc, #108]	; (800051c <fsm_auto_traffic_1+0xf8>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a17      	ldr	r2, [pc, #92]	; (8000510 <fsm_auto_traffic_1+0xec>)
 80004b4:	6013      	str	r3, [r2, #0]
					  auto_status_1 = 0;
 80004b6:	4b15      	ldr	r3, [pc, #84]	; (800050c <fsm_auto_traffic_1+0xe8>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
		break;
 80004bc:	e021      	b.n	8000502 <fsm_auto_traffic_1+0xde>
				lcd_goto_XY(0, 14);
 80004be:	210e      	movs	r1, #14
 80004c0:	2000      	movs	r0, #0
 80004c2:	f000 faed 	bl	8000aa0 <lcd_goto_XY>
				lcd_send_num(clock_counter_1);
 80004c6:	4b12      	ldr	r3, [pc, #72]	; (8000510 <fsm_auto_traffic_1+0xec>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 fad2 	bl	8000a74 <lcd_send_num>
				HAL_GPIO_WritePin(Traffic_light_2_1_GPIO_Port, Traffic_light_2_1_Pin, SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2110      	movs	r1, #16
 80004d4:	480f      	ldr	r0, [pc, #60]	; (8000514 <fsm_auto_traffic_1+0xf0>)
 80004d6:	f001 f93e 	bl	8001756 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Traffic_light_2_2_GPIO_Port, Traffic_light_2_2_Pin, RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e0:	480c      	ldr	r0, [pc, #48]	; (8000514 <fsm_auto_traffic_1+0xf0>)
 80004e2:	f001 f938 	bl	8001756 <HAL_GPIO_WritePin>
				  if(clock_counter_1 == 0)
 80004e6:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <fsm_auto_traffic_1+0xec>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d10b      	bne.n	8000506 <fsm_auto_traffic_1+0xe2>
					  clock_counter_1 = MAX_YELLOW;
 80004ee:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <fsm_auto_traffic_1+0xfc>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <fsm_auto_traffic_1+0xec>)
 80004f4:	6013      	str	r3, [r2, #0]
					  auto_status_1 = 1;
 80004f6:	4b05      	ldr	r3, [pc, #20]	; (800050c <fsm_auto_traffic_1+0xe8>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	601a      	str	r2, [r3, #0]
		break;
 80004fc:	e003      	b.n	8000506 <fsm_auto_traffic_1+0xe2>
		break;
 80004fe:	bf00      	nop
 8000500:	e002      	b.n	8000508 <fsm_auto_traffic_1+0xe4>
		break;
 8000502:	bf00      	nop
 8000504:	e000      	b.n	8000508 <fsm_auto_traffic_1+0xe4>
		break;
 8000506:	bf00      	nop
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	2000010c 	.word	0x2000010c
 8000510:	20000054 	.word	0x20000054
 8000514:	40010c00 	.word	0x40010c00
 8000518:	2000006c 	.word	0x2000006c
 800051c:	20000064 	.word	0x20000064
 8000520:	20000068 	.word	0x20000068

08000524 <blink_red>:

void blink_red()
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	if(timer_flag[2] == 1)
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <blink_red+0x44>)
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d118      	bne.n	8000562 <blink_red+0x3e>
	{
		HAL_GPIO_WritePin(Traffic_light_1_1_GPIO_Port, Traffic_light_1_1_Pin, SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2108      	movs	r1, #8
 8000534:	480d      	ldr	r0, [pc, #52]	; (800056c <blink_red+0x48>)
 8000536:	f001 f90e 	bl	8001756 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_light_1_2_GPIO_Port, Traffic_light_1_2_Pin, SET);
 800053a:	2201      	movs	r2, #1
 800053c:	2120      	movs	r1, #32
 800053e:	480b      	ldr	r0, [pc, #44]	; (800056c <blink_red+0x48>)
 8000540:	f001 f909 	bl	8001756 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_light_2_1_GPIO_Port, Traffic_light_2_1_Pin, SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2110      	movs	r1, #16
 8000548:	4808      	ldr	r0, [pc, #32]	; (800056c <blink_red+0x48>)
 800054a:	f001 f904 	bl	8001756 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_light_2_2_GPIO_Port, Traffic_light_2_2_Pin, SET);
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000554:	4805      	ldr	r0, [pc, #20]	; (800056c <blink_red+0x48>)
 8000556:	f001 f8fe 	bl	8001756 <HAL_GPIO_WritePin>
		setTimer(25, 2);
 800055a:	2102      	movs	r1, #2
 800055c:	2019      	movs	r0, #25
 800055e:	f000 fd51 	bl	8001004 <setTimer>
	}
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000128 	.word	0x20000128
 800056c:	40010c00 	.word	0x40010c00

08000570 <blink_yellow>:

//MODE 3
void blink_yellow()
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	if(timer_flag[2] == 1)
 8000574:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <blink_yellow+0x44>)
 8000576:	689b      	ldr	r3, [r3, #8]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d118      	bne.n	80005ae <blink_yellow+0x3e>
	{
		HAL_GPIO_WritePin(Traffic_light_1_1_GPIO_Port, Traffic_light_1_1_Pin, RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	2108      	movs	r1, #8
 8000580:	480d      	ldr	r0, [pc, #52]	; (80005b8 <blink_yellow+0x48>)
 8000582:	f001 f8e8 	bl	8001756 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_light_1_2_GPIO_Port, Traffic_light_1_2_Pin, SET);
 8000586:	2201      	movs	r2, #1
 8000588:	2120      	movs	r1, #32
 800058a:	480b      	ldr	r0, [pc, #44]	; (80005b8 <blink_yellow+0x48>)
 800058c:	f001 f8e3 	bl	8001756 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_light_2_1_GPIO_Port, Traffic_light_2_1_Pin, RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2110      	movs	r1, #16
 8000594:	4808      	ldr	r0, [pc, #32]	; (80005b8 <blink_yellow+0x48>)
 8000596:	f001 f8de 	bl	8001756 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_light_2_2_GPIO_Port, Traffic_light_2_2_Pin, SET);
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a0:	4805      	ldr	r0, [pc, #20]	; (80005b8 <blink_yellow+0x48>)
 80005a2:	f001 f8d8 	bl	8001756 <HAL_GPIO_WritePin>
		setTimer(25, 2);
 80005a6:	2102      	movs	r1, #2
 80005a8:	2019      	movs	r0, #25
 80005aa:	f000 fd2b 	bl	8001004 <setTimer>
	}
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000128 	.word	0x20000128
 80005b8:	40010c00 	.word	0x40010c00

080005bc <blink_green>:

//MODE 4
void blink_green()
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	if(timer_flag[2] == 1)
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <blink_green+0x44>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d118      	bne.n	80005fa <blink_green+0x3e>
	{
		HAL_GPIO_WritePin(Traffic_light_1_1_GPIO_Port, Traffic_light_1_1_Pin, SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2108      	movs	r1, #8
 80005cc:	480d      	ldr	r0, [pc, #52]	; (8000604 <blink_green+0x48>)
 80005ce:	f001 f8c2 	bl	8001756 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_light_1_2_GPIO_Port, Traffic_light_1_2_Pin, RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2120      	movs	r1, #32
 80005d6:	480b      	ldr	r0, [pc, #44]	; (8000604 <blink_green+0x48>)
 80005d8:	f001 f8bd 	bl	8001756 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_light_2_1_GPIO_Port, Traffic_light_2_1_Pin, SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2110      	movs	r1, #16
 80005e0:	4808      	ldr	r0, [pc, #32]	; (8000604 <blink_green+0x48>)
 80005e2:	f001 f8b8 	bl	8001756 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic_light_2_2_GPIO_Port, Traffic_light_2_2_Pin, RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ec:	4805      	ldr	r0, [pc, #20]	; (8000604 <blink_green+0x48>)
 80005ee:	f001 f8b2 	bl	8001756 <HAL_GPIO_WritePin>
		setTimer(25, 2);
 80005f2:	2102      	movs	r1, #2
 80005f4:	2019      	movs	r0, #25
 80005f6:	f000 fd05 	bl	8001004 <setTimer>
	}
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000128 	.word	0x20000128
 8000604:	40010c00 	.word	0x40010c00

08000608 <fsm_traffic>:

int mode = 0;
void fsm_traffic(){
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	switch(manual_status)
 800060c:	4baf      	ldr	r3, [pc, #700]	; (80008cc <fsm_traffic+0x2c4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b03      	cmp	r3, #3
 8000612:	f200 80d9 	bhi.w	80007c8 <fsm_traffic+0x1c0>
 8000616:	a201      	add	r2, pc, #4	; (adr r2, 800061c <fsm_traffic+0x14>)
 8000618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061c:	0800062d 	.word	0x0800062d
 8000620:	0800064b 	.word	0x0800064b
 8000624:	080006af 	.word	0x080006af
 8000628:	08000711 	.word	0x08000711
	{
	case 0:
		fsm_auto_traffic();
 800062c:	f7ff fe7c 	bl	8000328 <fsm_auto_traffic>
		fsm_auto_traffic_1();
 8000630:	f7ff fef8 	bl	8000424 <fsm_auto_traffic_1>
		if(isButtonPressed(0) == 1){
 8000634:	2000      	movs	r0, #0
 8000636:	f7ff fd99 	bl	800016c <isButtonPressed>
 800063a:	4603      	mov	r3, r0
 800063c:	2b01      	cmp	r3, #1
 800063e:	f040 80bc 	bne.w	80007ba <fsm_traffic+0x1b2>
			manual_status = 1;
 8000642:	4ba2      	ldr	r3, [pc, #648]	; (80008cc <fsm_traffic+0x2c4>)
 8000644:	2201      	movs	r2, #1
 8000646:	601a      	str	r2, [r3, #0]
		}

		break;
 8000648:	e0b7      	b.n	80007ba <fsm_traffic+0x1b2>
	case 1:
		blink_red();
 800064a:	f7ff ff6b 	bl	8000524 <blink_red>
		if(isButtonPressed(0) == 1){
 800064e:	2000      	movs	r0, #0
 8000650:	f7ff fd8c 	bl	800016c <isButtonPressed>
 8000654:	4603      	mov	r3, r0
 8000656:	2b01      	cmp	r3, #1
 8000658:	d102      	bne.n	8000660 <fsm_traffic+0x58>
			manual_status = 2;
 800065a:	4b9c      	ldr	r3, [pc, #624]	; (80008cc <fsm_traffic+0x2c4>)
 800065c:	2202      	movs	r2, #2
 800065e:	601a      	str	r2, [r3, #0]
		}
		lcd_goto_XY(0, 5);
 8000660:	2105      	movs	r1, #5
 8000662:	2000      	movs	r0, #0
 8000664:	f000 fa1c 	bl	8000aa0 <lcd_goto_XY>
		lcd_send_num(BUFFER_RED);
 8000668:	4b99      	ldr	r3, [pc, #612]	; (80008d0 <fsm_traffic+0x2c8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fa01 	bl	8000a74 <lcd_send_num>
		if(isButtonPressed(1) == 1){
 8000672:	2001      	movs	r0, #1
 8000674:	f7ff fd7a 	bl	800016c <isButtonPressed>
 8000678:	4603      	mov	r3, r0
 800067a:	2b01      	cmp	r3, #1
 800067c:	d10b      	bne.n	8000696 <fsm_traffic+0x8e>
			BUFFER_RED++;
 800067e:	4b94      	ldr	r3, [pc, #592]	; (80008d0 <fsm_traffic+0x2c8>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	3301      	adds	r3, #1
 8000684:	4a92      	ldr	r2, [pc, #584]	; (80008d0 <fsm_traffic+0x2c8>)
 8000686:	6013      	str	r3, [r2, #0]
			if(BUFFER_RED == 10){BUFFER_RED = 0;}
 8000688:	4b91      	ldr	r3, [pc, #580]	; (80008d0 <fsm_traffic+0x2c8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b0a      	cmp	r3, #10
 800068e:	d102      	bne.n	8000696 <fsm_traffic+0x8e>
 8000690:	4b8f      	ldr	r3, [pc, #572]	; (80008d0 <fsm_traffic+0x2c8>)
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(2) == 1){
 8000696:	2002      	movs	r0, #2
 8000698:	f7ff fd68 	bl	800016c <isButtonPressed>
 800069c:	4603      	mov	r3, r0
 800069e:	2b01      	cmp	r3, #1
 80006a0:	f040 808d 	bne.w	80007be <fsm_traffic+0x1b6>
			MAX_RED = BUFFER_RED;
 80006a4:	4b8a      	ldr	r3, [pc, #552]	; (80008d0 <fsm_traffic+0x2c8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a8a      	ldr	r2, [pc, #552]	; (80008d4 <fsm_traffic+0x2cc>)
 80006aa:	6013      	str	r3, [r2, #0]
		}
		break;
 80006ac:	e087      	b.n	80007be <fsm_traffic+0x1b6>
	case 2:
		blink_yellow();
 80006ae:	f7ff ff5f 	bl	8000570 <blink_yellow>
		if(isButtonPressed(0) == 1){
 80006b2:	2000      	movs	r0, #0
 80006b4:	f7ff fd5a 	bl	800016c <isButtonPressed>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d102      	bne.n	80006c4 <fsm_traffic+0xbc>
			manual_status = 3;
 80006be:	4b83      	ldr	r3, [pc, #524]	; (80008cc <fsm_traffic+0x2c4>)
 80006c0:	2203      	movs	r2, #3
 80006c2:	601a      	str	r2, [r3, #0]
		}
		lcd_goto_XY(0, 8);
 80006c4:	2108      	movs	r1, #8
 80006c6:	2000      	movs	r0, #0
 80006c8:	f000 f9ea 	bl	8000aa0 <lcd_goto_XY>
		lcd_send_num(BUFFER_YELLOW);
 80006cc:	4b82      	ldr	r3, [pc, #520]	; (80008d8 <fsm_traffic+0x2d0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 f9cf 	bl	8000a74 <lcd_send_num>
		if(isButtonPressed(1) == 1){
 80006d6:	2001      	movs	r0, #1
 80006d8:	f7ff fd48 	bl	800016c <isButtonPressed>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d10b      	bne.n	80006fa <fsm_traffic+0xf2>
			BUFFER_YELLOW++;
 80006e2:	4b7d      	ldr	r3, [pc, #500]	; (80008d8 <fsm_traffic+0x2d0>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	3301      	adds	r3, #1
 80006e8:	4a7b      	ldr	r2, [pc, #492]	; (80008d8 <fsm_traffic+0x2d0>)
 80006ea:	6013      	str	r3, [r2, #0]
			if(BUFFER_YELLOW == 10){
 80006ec:	4b7a      	ldr	r3, [pc, #488]	; (80008d8 <fsm_traffic+0x2d0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b0a      	cmp	r3, #10
 80006f2:	d102      	bne.n	80006fa <fsm_traffic+0xf2>
				BUFFER_YELLOW = 0;
 80006f4:	4b78      	ldr	r3, [pc, #480]	; (80008d8 <fsm_traffic+0x2d0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
			}
		}
		if(isButtonPressed(2) == 1){
 80006fa:	2002      	movs	r0, #2
 80006fc:	f7ff fd36 	bl	800016c <isButtonPressed>
 8000700:	4603      	mov	r3, r0
 8000702:	2b01      	cmp	r3, #1
 8000704:	d15d      	bne.n	80007c2 <fsm_traffic+0x1ba>
			MAX_YELLOW = BUFFER_YELLOW;
 8000706:	4b74      	ldr	r3, [pc, #464]	; (80008d8 <fsm_traffic+0x2d0>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a74      	ldr	r2, [pc, #464]	; (80008dc <fsm_traffic+0x2d4>)
 800070c:	6013      	str	r3, [r2, #0]
		}
		break;
 800070e:	e058      	b.n	80007c2 <fsm_traffic+0x1ba>
	case 3:
		blink_green();
 8000710:	f7ff ff54 	bl	80005bc <blink_green>
		if(isButtonPressed(0) == 1){
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff fd29 	bl	800016c <isButtonPressed>
 800071a:	4603      	mov	r3, r0
 800071c:	2b01      	cmp	r3, #1
 800071e:	d126      	bne.n	800076e <fsm_traffic+0x166>
			manual_status = 0;
 8000720:	4b6a      	ldr	r3, [pc, #424]	; (80008cc <fsm_traffic+0x2c4>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
			//CHECK CONDITIONS HERE
			if(BUFFER_RED != BUFFER_GREEN + BUFFER_YELLOW)
 8000726:	4b6e      	ldr	r3, [pc, #440]	; (80008e0 <fsm_traffic+0x2d8>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	4b6b      	ldr	r3, [pc, #428]	; (80008d8 <fsm_traffic+0x2d0>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	441a      	add	r2, r3
 8000730:	4b67      	ldr	r3, [pc, #412]	; (80008d0 <fsm_traffic+0x2c8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	429a      	cmp	r2, r3
 8000736:	d008      	beq.n	800074a <fsm_traffic+0x142>
			{
				MAX_RED = 5;
 8000738:	4b66      	ldr	r3, [pc, #408]	; (80008d4 <fsm_traffic+0x2cc>)
 800073a:	2205      	movs	r2, #5
 800073c:	601a      	str	r2, [r3, #0]
				MAX_YELLOW = 2;
 800073e:	4b67      	ldr	r3, [pc, #412]	; (80008dc <fsm_traffic+0x2d4>)
 8000740:	2202      	movs	r2, #2
 8000742:	601a      	str	r2, [r3, #0]
				MAX_GREEN = 3;
 8000744:	4b67      	ldr	r3, [pc, #412]	; (80008e4 <fsm_traffic+0x2dc>)
 8000746:	2203      	movs	r2, #3
 8000748:	601a      	str	r2, [r3, #0]
			}
			//RESET TRAFFIC
			auto_status = 0;
 800074a:	4b67      	ldr	r3, [pc, #412]	; (80008e8 <fsm_traffic+0x2e0>)
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
			auto_status_1 = 0;
 8000750:	4b66      	ldr	r3, [pc, #408]	; (80008ec <fsm_traffic+0x2e4>)
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
			clock_counter = MAX_GREEN;
 8000756:	4b63      	ldr	r3, [pc, #396]	; (80008e4 <fsm_traffic+0x2dc>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a65      	ldr	r2, [pc, #404]	; (80008f0 <fsm_traffic+0x2e8>)
 800075c:	6013      	str	r3, [r2, #0]
			clock_counter_1 = MAX_RED;
 800075e:	4b5d      	ldr	r3, [pc, #372]	; (80008d4 <fsm_traffic+0x2cc>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a64      	ldr	r2, [pc, #400]	; (80008f4 <fsm_traffic+0x2ec>)
 8000764:	6013      	str	r3, [r2, #0]
			setTimer(100, 1);
 8000766:	2101      	movs	r1, #1
 8000768:	2064      	movs	r0, #100	; 0x64
 800076a:	f000 fc4b 	bl	8001004 <setTimer>
		}
		lcd_goto_XY(0, 7);
 800076e:	2107      	movs	r1, #7
 8000770:	2000      	movs	r0, #0
 8000772:	f000 f995 	bl	8000aa0 <lcd_goto_XY>
		lcd_send_num(BUFFER_GREEN);
 8000776:	4b5a      	ldr	r3, [pc, #360]	; (80008e0 <fsm_traffic+0x2d8>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f97a 	bl	8000a74 <lcd_send_num>
		if(isButtonPressed(1) == 1){
 8000780:	2001      	movs	r0, #1
 8000782:	f7ff fcf3 	bl	800016c <isButtonPressed>
 8000786:	4603      	mov	r3, r0
 8000788:	2b01      	cmp	r3, #1
 800078a:	d10b      	bne.n	80007a4 <fsm_traffic+0x19c>
			BUFFER_GREEN++;
 800078c:	4b54      	ldr	r3, [pc, #336]	; (80008e0 <fsm_traffic+0x2d8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	3301      	adds	r3, #1
 8000792:	4a53      	ldr	r2, [pc, #332]	; (80008e0 <fsm_traffic+0x2d8>)
 8000794:	6013      	str	r3, [r2, #0]
			if(BUFFER_GREEN == 10){BUFFER_GREEN = 0;}
 8000796:	4b52      	ldr	r3, [pc, #328]	; (80008e0 <fsm_traffic+0x2d8>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b0a      	cmp	r3, #10
 800079c:	d102      	bne.n	80007a4 <fsm_traffic+0x19c>
 800079e:	4b50      	ldr	r3, [pc, #320]	; (80008e0 <fsm_traffic+0x2d8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(2) == 1){
 80007a4:	2002      	movs	r0, #2
 80007a6:	f7ff fce1 	bl	800016c <isButtonPressed>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d10a      	bne.n	80007c6 <fsm_traffic+0x1be>
			MAX_GREEN = BUFFER_GREEN;
 80007b0:	4b4b      	ldr	r3, [pc, #300]	; (80008e0 <fsm_traffic+0x2d8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a4b      	ldr	r2, [pc, #300]	; (80008e4 <fsm_traffic+0x2dc>)
 80007b6:	6013      	str	r3, [r2, #0]
		}
		break;
 80007b8:	e005      	b.n	80007c6 <fsm_traffic+0x1be>
		break;
 80007ba:	bf00      	nop
 80007bc:	e004      	b.n	80007c8 <fsm_traffic+0x1c0>
		break;
 80007be:	bf00      	nop
 80007c0:	e002      	b.n	80007c8 <fsm_traffic+0x1c0>
		break;
 80007c2:	bf00      	nop
 80007c4:	e000      	b.n	80007c8 <fsm_traffic+0x1c0>
		break;
 80007c6:	bf00      	nop
	}


	switch (manual_status){
 80007c8:	4b40      	ldr	r3, [pc, #256]	; (80008cc <fsm_traffic+0x2c4>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b03      	cmp	r3, #3
 80007ce:	d87a      	bhi.n	80008c6 <fsm_traffic+0x2be>
 80007d0:	a201      	add	r2, pc, #4	; (adr r2, 80007d8 <fsm_traffic+0x1d0>)
 80007d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d6:	bf00      	nop
 80007d8:	080007e9 	.word	0x080007e9
 80007dc:	0800082b 	.word	0x0800082b
 80007e0:	0800085f 	.word	0x0800085f
 80007e4:	08000893 	.word	0x08000893
	case 0:
		if (manual_status == mode){
 80007e8:	4b38      	ldr	r3, [pc, #224]	; (80008cc <fsm_traffic+0x2c4>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b42      	ldr	r3, [pc, #264]	; (80008f8 <fsm_traffic+0x2f0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d101      	bne.n	80007f8 <fsm_traffic+0x1f0>
			lcd_clear_display();
 80007f4:	f000 f937 	bl	8000a66 <lcd_clear_display>
		}
		lcd_goto_XY(1, 0);
 80007f8:	2100      	movs	r1, #0
 80007fa:	2001      	movs	r0, #1
 80007fc:	f000 f950 	bl	8000aa0 <lcd_goto_XY>
		lcd_send_string("MODE 1");
 8000800:	483e      	ldr	r0, [pc, #248]	; (80008fc <fsm_traffic+0x2f4>)
 8000802:	f000 f91b 	bl	8000a3c <lcd_send_string>
		lcd_goto_XY(0, 0);
 8000806:	2100      	movs	r1, #0
 8000808:	2000      	movs	r0, #0
 800080a:	f000 f949 	bl	8000aa0 <lcd_goto_XY>
		lcd_send_string("ROAD1:");
 800080e:	483c      	ldr	r0, [pc, #240]	; (8000900 <fsm_traffic+0x2f8>)
 8000810:	f000 f914 	bl	8000a3c <lcd_send_string>
		lcd_goto_XY(0, 8);
 8000814:	2108      	movs	r1, #8
 8000816:	2000      	movs	r0, #0
 8000818:	f000 f942 	bl	8000aa0 <lcd_goto_XY>
		lcd_send_string("ROAD2:");
 800081c:	4839      	ldr	r0, [pc, #228]	; (8000904 <fsm_traffic+0x2fc>)
 800081e:	f000 f90d 	bl	8000a3c <lcd_send_string>
		mode = 1;
 8000822:	4b35      	ldr	r3, [pc, #212]	; (80008f8 <fsm_traffic+0x2f0>)
 8000824:	2201      	movs	r2, #1
 8000826:	601a      	str	r2, [r3, #0]
		break;
 8000828:	e04d      	b.n	80008c6 <fsm_traffic+0x2be>
	case 1:
		if (manual_status == mode){
 800082a:	4b28      	ldr	r3, [pc, #160]	; (80008cc <fsm_traffic+0x2c4>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	4b32      	ldr	r3, [pc, #200]	; (80008f8 <fsm_traffic+0x2f0>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	429a      	cmp	r2, r3
 8000834:	d101      	bne.n	800083a <fsm_traffic+0x232>
			lcd_clear_display();
 8000836:	f000 f916 	bl	8000a66 <lcd_clear_display>
		}
		lcd_goto_XY(1, 0);
 800083a:	2100      	movs	r1, #0
 800083c:	2001      	movs	r0, #1
 800083e:	f000 f92f 	bl	8000aa0 <lcd_goto_XY>
		lcd_send_string("MODE 2");
 8000842:	4831      	ldr	r0, [pc, #196]	; (8000908 <fsm_traffic+0x300>)
 8000844:	f000 f8fa 	bl	8000a3c <lcd_send_string>
		lcd_goto_XY(0, 0);
 8000848:	2100      	movs	r1, #0
 800084a:	2000      	movs	r0, #0
 800084c:	f000 f928 	bl	8000aa0 <lcd_goto_XY>
		lcd_send_string("RED:");
 8000850:	482e      	ldr	r0, [pc, #184]	; (800090c <fsm_traffic+0x304>)
 8000852:	f000 f8f3 	bl	8000a3c <lcd_send_string>
		mode = 2;
 8000856:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <fsm_traffic+0x2f0>)
 8000858:	2202      	movs	r2, #2
 800085a:	601a      	str	r2, [r3, #0]
		break;
 800085c:	e033      	b.n	80008c6 <fsm_traffic+0x2be>
	case 2:
		if (manual_status == mode){
 800085e:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <fsm_traffic+0x2c4>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <fsm_traffic+0x2f0>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	429a      	cmp	r2, r3
 8000868:	d101      	bne.n	800086e <fsm_traffic+0x266>
			lcd_clear_display();
 800086a:	f000 f8fc 	bl	8000a66 <lcd_clear_display>
		}
		lcd_goto_XY(1, 0);
 800086e:	2100      	movs	r1, #0
 8000870:	2001      	movs	r0, #1
 8000872:	f000 f915 	bl	8000aa0 <lcd_goto_XY>
		lcd_send_string("MODE 3");
 8000876:	4826      	ldr	r0, [pc, #152]	; (8000910 <fsm_traffic+0x308>)
 8000878:	f000 f8e0 	bl	8000a3c <lcd_send_string>
		lcd_goto_XY(0, 0);
 800087c:	2100      	movs	r1, #0
 800087e:	2000      	movs	r0, #0
 8000880:	f000 f90e 	bl	8000aa0 <lcd_goto_XY>
		lcd_send_string("YELLOW:");
 8000884:	4823      	ldr	r0, [pc, #140]	; (8000914 <fsm_traffic+0x30c>)
 8000886:	f000 f8d9 	bl	8000a3c <lcd_send_string>
		mode = 3;
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <fsm_traffic+0x2f0>)
 800088c:	2203      	movs	r2, #3
 800088e:	601a      	str	r2, [r3, #0]
		break;
 8000890:	e019      	b.n	80008c6 <fsm_traffic+0x2be>
	case 3:
		if (manual_status == mode){
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <fsm_traffic+0x2c4>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <fsm_traffic+0x2f0>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	429a      	cmp	r2, r3
 800089c:	d101      	bne.n	80008a2 <fsm_traffic+0x29a>
			lcd_clear_display();
 800089e:	f000 f8e2 	bl	8000a66 <lcd_clear_display>
		}
		lcd_goto_XY(1, 0);
 80008a2:	2100      	movs	r1, #0
 80008a4:	2001      	movs	r0, #1
 80008a6:	f000 f8fb 	bl	8000aa0 <lcd_goto_XY>
		lcd_send_string("MODE 4");
 80008aa:	481b      	ldr	r0, [pc, #108]	; (8000918 <fsm_traffic+0x310>)
 80008ac:	f000 f8c6 	bl	8000a3c <lcd_send_string>
		lcd_goto_XY(0, 0);
 80008b0:	2100      	movs	r1, #0
 80008b2:	2000      	movs	r0, #0
 80008b4:	f000 f8f4 	bl	8000aa0 <lcd_goto_XY>
		lcd_send_string("GREEN:");
 80008b8:	4818      	ldr	r0, [pc, #96]	; (800091c <fsm_traffic+0x314>)
 80008ba:	f000 f8bf 	bl	8000a3c <lcd_send_string>
		mode = 0;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <fsm_traffic+0x2f0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
		break;
 80008c4:	bf00      	nop
	}
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000110 	.word	0x20000110
 80008d0:	20000058 	.word	0x20000058
 80008d4:	20000064 	.word	0x20000064
 80008d8:	2000005c 	.word	0x2000005c
 80008dc:	20000068 	.word	0x20000068
 80008e0:	20000060 	.word	0x20000060
 80008e4:	2000006c 	.word	0x2000006c
 80008e8:	20000108 	.word	0x20000108
 80008ec:	2000010c 	.word	0x2000010c
 80008f0:	20000050 	.word	0x20000050
 80008f4:	20000054 	.word	0x20000054
 80008f8:	20000114 	.word	0x20000114
 80008fc:	080039b8 	.word	0x080039b8
 8000900:	080039c0 	.word	0x080039c0
 8000904:	080039c8 	.word	0x080039c8
 8000908:	080039d0 	.word	0x080039d0
 800090c:	080039d8 	.word	0x080039d8
 8000910:	080039e0 	.word	0x080039e0
 8000914:	080039e8 	.word	0x080039e8
 8000918:	080039f0 	.word	0x080039f0
 800091c:	080039f8 	.word	0x080039f8

08000920 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af02      	add	r7, sp, #8
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	f023 030f 	bic.w	r3, r3, #15
 8000930:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	011b      	lsls	r3, r3, #4
 8000936:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	f043 030c 	orr.w	r3, r3, #12
 800093e:	b2db      	uxtb	r3, r3
 8000940:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	f043 0308 	orr.w	r3, r3, #8
 8000948:	b2db      	uxtb	r3, r3
 800094a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800094c:	7bbb      	ldrb	r3, [r7, #14]
 800094e:	f043 030c 	orr.w	r3, r3, #12
 8000952:	b2db      	uxtb	r3, r3
 8000954:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	b2db      	uxtb	r3, r3
 800095e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000960:	f107 0208 	add.w	r2, r7, #8
 8000964:	2364      	movs	r3, #100	; 0x64
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2304      	movs	r3, #4
 800096a:	2142      	movs	r1, #66	; 0x42
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <lcd_send_cmd+0x5c>)
 800096e:	f001 f867 	bl	8001a40 <HAL_I2C_Master_Transmit>

}
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2000013c 	.word	0x2000013c

08000980 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af02      	add	r7, sp, #8
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	f023 030f 	bic.w	r3, r3, #15
 8000990:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	011b      	lsls	r3, r3, #4
 8000996:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	f043 030d 	orr.w	r3, r3, #13
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	f043 0309 	orr.w	r3, r3, #9
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80009ac:	7bbb      	ldrb	r3, [r7, #14]
 80009ae:	f043 030d 	orr.w	r3, r3, #13
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80009b6:	7bbb      	ldrb	r3, [r7, #14]
 80009b8:	f043 0309 	orr.w	r3, r3, #9
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009c0:	f107 0208 	add.w	r2, r7, #8
 80009c4:	2364      	movs	r3, #100	; 0x64
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	2304      	movs	r3, #4
 80009ca:	2142      	movs	r1, #66	; 0x42
 80009cc:	4803      	ldr	r0, [pc, #12]	; (80009dc <lcd_send_data+0x5c>)
 80009ce:	f001 f837 	bl	8001a40 <HAL_I2C_Master_Transmit>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2000013c 	.word	0x2000013c

080009e0 <lcd_init>:

void lcd_init (void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 80009e4:	2033      	movs	r0, #51	; 0x33
 80009e6:	f7ff ff9b 	bl	8000920 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80009ea:	2032      	movs	r0, #50	; 0x32
 80009ec:	f7ff ff98 	bl	8000920 <lcd_send_cmd>
	HAL_Delay(50);
 80009f0:	2032      	movs	r0, #50	; 0x32
 80009f2:	f000 fbe3 	bl	80011bc <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 80009f6:	2028      	movs	r0, #40	; 0x28
 80009f8:	f7ff ff92 	bl	8000920 <lcd_send_cmd>
	HAL_Delay(50);
 80009fc:	2032      	movs	r0, #50	; 0x32
 80009fe:	f000 fbdd 	bl	80011bc <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000a02:	2001      	movs	r0, #1
 8000a04:	f7ff ff8c 	bl	8000920 <lcd_send_cmd>
	HAL_Delay(50);
 8000a08:	2032      	movs	r0, #50	; 0x32
 8000a0a:	f000 fbd7 	bl	80011bc <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000a0e:	2006      	movs	r0, #6
 8000a10:	f7ff ff86 	bl	8000920 <lcd_send_cmd>
	HAL_Delay(50);
 8000a14:	2032      	movs	r0, #50	; 0x32
 8000a16:	f000 fbd1 	bl	80011bc <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000a1a:	200c      	movs	r0, #12
 8000a1c:	f7ff ff80 	bl	8000920 <lcd_send_cmd>
	HAL_Delay(50);
 8000a20:	2032      	movs	r0, #50	; 0x32
 8000a22:	f000 fbcb 	bl	80011bc <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000a26:	2002      	movs	r0, #2
 8000a28:	f7ff ff7a 	bl	8000920 <lcd_send_cmd>
	HAL_Delay(50);
 8000a2c:	2032      	movs	r0, #50	; 0x32
 8000a2e:	f000 fbc5 	bl	80011bc <HAL_Delay>
	lcd_send_cmd (0x80);
 8000a32:	2080      	movs	r0, #128	; 0x80
 8000a34:	f7ff ff74 	bl	8000920 <lcd_send_cmd>
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000a44:	e006      	b.n	8000a54 <lcd_send_string+0x18>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	1c5a      	adds	r2, r3, #1
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff ff96 	bl	8000980 <lcd_send_data>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1f4      	bne.n	8000a46 <lcd_send_string+0xa>
}
 8000a5c:	bf00      	nop
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f7ff ff58 	bl	8000920 <lcd_send_cmd>
	//HAL_Delay(10);
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <lcd_send_num>:

void lcd_send_num (int num){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	char buffer[8];
	sprintf(buffer, "%d", num);
 8000a7c:	f107 0308 	add.w	r3, r7, #8
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	4906      	ldr	r1, [pc, #24]	; (8000a9c <lcd_send_num+0x28>)
 8000a84:	4618      	mov	r0, r3
 8000a86:	f002 fb51 	bl	800312c <siprintf>
	lcd_send_string(buffer);
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff ffd4 	bl	8000a3c <lcd_send_string>
}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	08003a00 	.word	0x08003a00

08000aa0 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d108      	bne.n	8000ac2 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4413      	add	r3, r2
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	337f      	adds	r3, #127	; 0x7f
 8000abe:	73fb      	strb	r3, [r7, #15]
 8000ac0:	e008      	b.n	8000ad4 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	3340      	adds	r3, #64	; 0x40
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	b25b      	sxtb	r3, r3
 8000acc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ad0:	b25b      	sxtb	r3, r3
 8000ad2:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ff22 	bl	8000920 <lcd_send_cmd>
}
 8000adc:	bf00      	nop
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae8:	f000 fb06 	bl	80010f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aec:	f000 f824 	bl	8000b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af0:	f000 f8dc 	bl	8000cac <MX_GPIO_Init>
  MX_TIM2_Init();
 8000af4:	f000 f88e 	bl	8000c14 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000af8:	f000 f85e 	bl	8000bb8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000afc:	480b      	ldr	r0, [pc, #44]	; (8000b2c <main+0x48>)
 8000afe:	f001 ff41 	bl	8002984 <HAL_TIM_Base_Start_IT>
  setAllTimer(100);
 8000b02:	2064      	movs	r0, #100	; 0x64
 8000b04:	f000 fa68 	bl	8000fd8 <setAllTimer>
  HAL_GPIO_WritePin(GPIOB, Traffic_light_1_1_Pin|Traffic_light_1_2_Pin|Traffic_light_2_1_Pin|Traffic_light_2_2_Pin, 1);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000b0e:	4808      	ldr	r0, [pc, #32]	; (8000b30 <main+0x4c>)
 8000b10:	f000 fe21 	bl	8001756 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PA5_GPIO_Port, PA5_Pin, 1);
 8000b14:	2201      	movs	r2, #1
 8000b16:	2120      	movs	r1, #32
 8000b18:	4806      	ldr	r0, [pc, #24]	; (8000b34 <main+0x50>)
 8000b1a:	f000 fe1c 	bl	8001756 <HAL_GPIO_WritePin>
  lcd_init();
 8000b1e:	f7ff ff5f 	bl	80009e0 <lcd_init>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_clock_counter();
 8000b22:	f7ff fbd1 	bl	80002c8 <fsm_clock_counter>
	  fsm_traffic();
 8000b26:	f7ff fd6f 	bl	8000608 <fsm_traffic>
	  fsm_clock_counter();
 8000b2a:	e7fa      	b.n	8000b22 <main+0x3e>
 8000b2c:	20000190 	.word	0x20000190
 8000b30:	40010c00 	.word	0x40010c00
 8000b34:	40010800 	.word	0x40010800

08000b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b090      	sub	sp, #64	; 0x40
 8000b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3e:	f107 0318 	add.w	r3, r7, #24
 8000b42:	2228      	movs	r2, #40	; 0x28
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f002 fae8 	bl	800311c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b62:	2310      	movs	r3, #16
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b66:	2302      	movs	r3, #2
 8000b68:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b72:	f107 0318 	add.w	r3, r7, #24
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 faba 	bl	80020f0 <HAL_RCC_OscConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000b82:	f000 f90f 	bl	8000da4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b86:	230f      	movs	r3, #15
 8000b88:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f001 fd25 	bl	80025f0 <HAL_RCC_ClockConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000bac:	f000 f8fa 	bl	8000da4 <Error_Handler>
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	3740      	adds	r7, #64	; 0x40
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_I2C1_Init+0x50>)
 8000bbe:	4a13      	ldr	r2, [pc, #76]	; (8000c0c <MX_I2C1_Init+0x54>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_I2C1_Init+0x50>)
 8000bc4:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <MX_I2C1_Init+0x58>)
 8000bc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_I2C1_Init+0x50>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_I2C1_Init+0x50>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MX_I2C1_Init+0x50>)
 8000bd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <MX_I2C1_Init+0x50>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_I2C1_Init+0x50>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <MX_I2C1_Init+0x50>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_I2C1_Init+0x50>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <MX_I2C1_Init+0x50>)
 8000bf6:	f000 fddf 	bl	80017b8 <HAL_I2C_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c00:	f000 f8d0 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	2000013c 	.word	0x2000013c
 8000c0c:	40005400 	.word	0x40005400
 8000c10:	000186a0 	.word	0x000186a0

08000c14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c28:	463b      	mov	r3, r7
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c3a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c40:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c48:	2209      	movs	r2, #9
 8000c4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c58:	4813      	ldr	r0, [pc, #76]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c5a:	f001 fe43 	bl	80028e4 <HAL_TIM_Base_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c64:	f000 f89e 	bl	8000da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	4619      	mov	r1, r3
 8000c74:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c76:	f001 ffc7 	bl	8002c08 <HAL_TIM_ConfigClockSource>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c80:	f000 f890 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c84:	2300      	movs	r3, #0
 8000c86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c92:	f002 f9a9 	bl	8002fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c9c:	f000 f882 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000190 	.word	0x20000190

08000cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc0:	4b34      	ldr	r3, [pc, #208]	; (8000d94 <MX_GPIO_Init+0xe8>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a33      	ldr	r2, [pc, #204]	; (8000d94 <MX_GPIO_Init+0xe8>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b31      	ldr	r3, [pc, #196]	; (8000d94 <MX_GPIO_Init+0xe8>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd8:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <MX_GPIO_Init+0xe8>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a2d      	ldr	r2, [pc, #180]	; (8000d94 <MX_GPIO_Init+0xe8>)
 8000cde:	f043 0308 	orr.w	r3, r3, #8
 8000ce2:	6193      	str	r3, [r2, #24]
 8000ce4:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <MX_GPIO_Init+0xe8>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f003 0308 	and.w	r3, r3, #8
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf0:	4b28      	ldr	r3, [pc, #160]	; (8000d94 <MX_GPIO_Init+0xe8>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_GPIO_Init+0xe8>)
 8000cf6:	f043 0310 	orr.w	r3, r3, #16
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_GPIO_Init+0xe8>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0310 	and.w	r3, r3, #16
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PA5_GPIO_Port, PA5_Pin, GPIO_PIN_RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2120      	movs	r1, #32
 8000d0c:	4822      	ldr	r0, [pc, #136]	; (8000d98 <MX_GPIO_Init+0xec>)
 8000d0e:	f000 fd22 	bl	8001756 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Traffic_light_2_2_Pin|Traffic_light_1_1_Pin|Traffic_light_2_1_Pin|Traffic_light_1_2_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000d18:	4820      	ldr	r0, [pc, #128]	; (8000d9c <MX_GPIO_Init+0xf0>)
 8000d1a:	f000 fd1c 	bl	8001756 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5_Pin */
  GPIO_InitStruct.Pin = PA5_Pin;
 8000d1e:	2320      	movs	r3, #32
 8000d20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PA5_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	4619      	mov	r1, r3
 8000d34:	4818      	ldr	r0, [pc, #96]	; (8000d98 <MX_GPIO_Init+0xec>)
 8000d36:	f000 fb73 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pins : Traffic_light_2_2_Pin Traffic_light_1_1_Pin Traffic_light_2_1_Pin Traffic_light_1_2_Pin */
  GPIO_InitStruct.Pin = Traffic_light_2_2_Pin|Traffic_light_1_1_Pin|Traffic_light_2_1_Pin|Traffic_light_1_2_Pin;
 8000d3a:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000d3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	4619      	mov	r1, r3
 8000d52:	4812      	ldr	r0, [pc, #72]	; (8000d9c <MX_GPIO_Init+0xf0>)
 8000d54:	f000 fb64 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_set_Pin */
  GPIO_InitStruct.Pin = button_set_Pin;
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_set_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480d      	ldr	r0, [pc, #52]	; (8000da0 <MX_GPIO_Init+0xf4>)
 8000d6c:	f000 fb58 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pins : button_time_Pin button_mode_Pin */
  GPIO_InitStruct.Pin = button_time_Pin|button_mode_Pin;
 8000d70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0310 	add.w	r3, r7, #16
 8000d82:	4619      	mov	r1, r3
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <MX_GPIO_Init+0xec>)
 8000d86:	f000 fb4b 	bl	8001420 <HAL_GPIO_Init>

}
 8000d8a:	bf00      	nop
 8000d8c:	3720      	adds	r7, #32
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40010800 	.word	0x40010800
 8000d9c:	40010c00 	.word	0x40010c00
 8000da0:	40011000 	.word	0x40011000

08000da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da8:	b672      	cpsid	i
}
 8000daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dac:	e7fe      	b.n	8000dac <Error_Handler+0x8>
	...

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_MspInit+0x5c>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <HAL_MspInit+0x5c>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6193      	str	r3, [r2, #24]
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_MspInit+0x5c>)
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <HAL_MspInit+0x5c>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <HAL_MspInit+0x5c>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	61d3      	str	r3, [r2, #28]
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <HAL_MspInit+0x5c>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_MspInit+0x60>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <HAL_MspInit+0x60>)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010000 	.word	0x40010000

08000e14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a1d      	ldr	r2, [pc, #116]	; (8000ea4 <HAL_I2C_MspInit+0x90>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d132      	bne.n	8000e9a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e34:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <HAL_I2C_MspInit+0x94>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a1b      	ldr	r2, [pc, #108]	; (8000ea8 <HAL_I2C_MspInit+0x94>)
 8000e3a:	f043 0308 	orr.w	r3, r3, #8
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <HAL_I2C_MspInit+0x94>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f003 0308 	and.w	r3, r3, #8
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e52:	2312      	movs	r3, #18
 8000e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4812      	ldr	r0, [pc, #72]	; (8000eac <HAL_I2C_MspInit+0x98>)
 8000e62:	f000 fadd 	bl	8001420 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000e66:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_I2C_MspInit+0x9c>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
 8000e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e7c:	4a0c      	ldr	r2, [pc, #48]	; (8000eb0 <HAL_I2C_MspInit+0x9c>)
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e80:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <HAL_I2C_MspInit+0x94>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <HAL_I2C_MspInit+0x94>)
 8000e88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e8c:	61d3      	str	r3, [r2, #28]
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_I2C_MspInit+0x94>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	; 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40005400 	.word	0x40005400
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010c00 	.word	0x40010c00
 8000eb0:	40010000 	.word	0x40010000

08000eb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec4:	d113      	bne.n	8000eee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <HAL_TIM_Base_MspInit+0x44>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <HAL_TIM_Base_MspInit+0x44>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	61d3      	str	r3, [r2, #28]
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <HAL_TIM_Base_MspInit+0x44>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	201c      	movs	r0, #28
 8000ee4:	f000 fa65 	bl	80013b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ee8:	201c      	movs	r0, #28
 8000eea:	f000 fa7e 	bl	80013ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40021000 	.word	0x40021000

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <NMI_Handler+0x4>

08000f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <MemManage_Handler+0x4>

08000f0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr

08000f26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr

08000f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr

08000f3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f42:	f000 f91f 	bl	8001184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <TIM2_IRQHandler+0x10>)
 8000f52:	f001 fd69 	bl	8002a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000190 	.word	0x20000190

08000f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f68:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <_sbrk+0x5c>)
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <_sbrk+0x60>)
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <_sbrk+0x64>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <_sbrk+0x68>)
 8000f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d207      	bcs.n	8000fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f90:	f002 f89a 	bl	80030c8 <__errno>
 8000f94:	4603      	mov	r3, r0
 8000f96:	220c      	movs	r2, #12
 8000f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9e:	e009      	b.n	8000fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <_sbrk+0x64>)
 8000fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20005000 	.word	0x20005000
 8000fc0:	00000400 	.word	0x00000400
 8000fc4:	20000118 	.word	0x20000118
 8000fc8:	200001f0 	.word	0x200001f0

08000fcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr

08000fd8 <setAllTimer>:

int timer_counter[TIMER_COUNT] = {0};
int timer_flag[TIMER_COUNT] = {0};
int timer_delay[TIMER_COUNT] = {100};
void setAllTimer(int duration)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < TIMER_COUNT; i++) setTimer(duration, i);
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	e006      	b.n	8000ff4 <setAllTimer+0x1c>
 8000fe6:	68f9      	ldr	r1, [r7, #12]
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f000 f80b 	bl	8001004 <setTimer>
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	ddf5      	ble.n	8000fe6 <setAllTimer+0xe>
}
 8000ffa:	bf00      	nop
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <setTimer>:

void setTimer(int duration, int index)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 800100e:	4a07      	ldr	r2, [pc, #28]	; (800102c <setTimer+0x28>)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	2100      	movs	r1, #0
 8001014:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = duration;
 8001018:	4905      	ldr	r1, [pc, #20]	; (8001030 <setTimer+0x2c>)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	20000128 	.word	0x20000128
 8001030:	2000011c 	.word	0x2000011c

08001034 <timerRun>:

void timerRun()
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
	for(int i = 0; i < TIMER_COUNT; i++){
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	e01c      	b.n	800107a <timerRun+0x46>
	if(timer_counter[i] > 0)
 8001040:	4a12      	ldr	r2, [pc, #72]	; (800108c <timerRun+0x58>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001048:	2b00      	cmp	r3, #0
 800104a:	dd13      	ble.n	8001074 <timerRun+0x40>
	{
		timer_counter[i]--;
 800104c:	4a0f      	ldr	r2, [pc, #60]	; (800108c <timerRun+0x58>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001054:	1e5a      	subs	r2, r3, #1
 8001056:	490d      	ldr	r1, [pc, #52]	; (800108c <timerRun+0x58>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[i] <= 0)
 800105e:	4a0b      	ldr	r2, [pc, #44]	; (800108c <timerRun+0x58>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001066:	2b00      	cmp	r3, #0
 8001068:	dc04      	bgt.n	8001074 <timerRun+0x40>
		{
			timer_flag[i] = 1;
 800106a:	4a09      	ldr	r2, [pc, #36]	; (8001090 <timerRun+0x5c>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2101      	movs	r1, #1
 8001070:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < TIMER_COUNT; i++){
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3301      	adds	r3, #1
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b02      	cmp	r3, #2
 800107e:	dddf      	ble.n	8001040 <timerRun+0xc>
		}
	}
	}
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	2000011c 	.word	0x2000011c
 8001090:	20000128 	.word	0x20000128

08001094 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	timerRun();
 800109c:	f7ff ffca 	bl	8001034 <timerRun>
	getKeyInput();
 80010a0:	f7ff f87e 	bl	80001a0 <getKeyInput>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010ac:	f7ff ff8e 	bl	8000fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b0:	480b      	ldr	r0, [pc, #44]	; (80010e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010b2:	490c      	ldr	r1, [pc, #48]	; (80010e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010b4:	4a0c      	ldr	r2, [pc, #48]	; (80010e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b8:	e002      	b.n	80010c0 <LoopCopyDataInit>

080010ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010be:	3304      	adds	r3, #4

080010c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c4:	d3f9      	bcc.n	80010ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c6:	4a09      	ldr	r2, [pc, #36]	; (80010ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010c8:	4c09      	ldr	r4, [pc, #36]	; (80010f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010cc:	e001      	b.n	80010d2 <LoopFillZerobss>

080010ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d0:	3204      	adds	r2, #4

080010d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d4:	d3fb      	bcc.n	80010ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010d6:	f001 fffd 	bl	80030d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010da:	f7ff fd03 	bl	8000ae4 <main>
  bx lr
 80010de:	4770      	bx	lr
  ldr r0, =_sdata
 80010e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e4:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 80010e8:	08003a6c 	.word	0x08003a6c
  ldr r2, =_sbss
 80010ec:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80010f0:	200001ec 	.word	0x200001ec

080010f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010f4:	e7fe      	b.n	80010f4 <ADC1_2_IRQHandler>
	...

080010f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <HAL_Init+0x28>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a07      	ldr	r2, [pc, #28]	; (8001120 <HAL_Init+0x28>)
 8001102:	f043 0310 	orr.w	r3, r3, #16
 8001106:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001108:	2003      	movs	r0, #3
 800110a:	f000 f947 	bl	800139c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800110e:	200f      	movs	r0, #15
 8001110:	f000 f808 	bl	8001124 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001114:	f7ff fe4c 	bl	8000db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40022000 	.word	0x40022000

08001124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_InitTick+0x54>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_InitTick+0x58>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	fbb3 f3f1 	udiv	r3, r3, r1
 800113e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f95f 	bl	8001406 <HAL_SYSTICK_Config>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e00e      	b.n	8001170 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b0f      	cmp	r3, #15
 8001156:	d80a      	bhi.n	800116e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001158:	2200      	movs	r2, #0
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f000 f927 	bl	80013b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <HAL_InitTick+0x5c>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	e000      	b.n	8001170 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000070 	.word	0x20000070
 800117c:	20000078 	.word	0x20000078
 8001180:	20000074 	.word	0x20000074

08001184 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <HAL_IncTick+0x1c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <HAL_IncTick+0x20>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4413      	add	r3, r2
 8001194:	4a03      	ldr	r2, [pc, #12]	; (80011a4 <HAL_IncTick+0x20>)
 8001196:	6013      	str	r3, [r2, #0]
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	20000078 	.word	0x20000078
 80011a4:	200001d8 	.word	0x200001d8

080011a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return uwTick;
 80011ac:	4b02      	ldr	r3, [pc, #8]	; (80011b8 <HAL_GetTick+0x10>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	200001d8 	.word	0x200001d8

080011bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c4:	f7ff fff0 	bl	80011a8 <HAL_GetTick>
 80011c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d4:	d005      	beq.n	80011e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_Delay+0x44>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011e2:	bf00      	nop
 80011e4:	f7ff ffe0 	bl	80011a8 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d8f7      	bhi.n	80011e4 <HAL_Delay+0x28>
  {
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000078 	.word	0x20000078

08001204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001220:	4013      	ands	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800122c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001236:	4a04      	ldr	r2, [pc, #16]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	60d3      	str	r3, [r2, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <__NVIC_GetPriorityGrouping+0x18>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	f003 0307 	and.w	r3, r3, #7
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db0b      	blt.n	8001292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f003 021f 	and.w	r2, r3, #31
 8001280:	4906      	ldr	r1, [pc, #24]	; (800129c <__NVIC_EnableIRQ+0x34>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	095b      	lsrs	r3, r3, #5
 8001288:	2001      	movs	r0, #1
 800128a:	fa00 f202 	lsl.w	r2, r0, r2
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	e000e100 	.word	0xe000e100

080012a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db0a      	blt.n	80012ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	; (80012ec <__NVIC_SetPriority+0x4c>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	440b      	add	r3, r1
 80012c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c8:	e00a      	b.n	80012e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4908      	ldr	r1, [pc, #32]	; (80012f0 <__NVIC_SetPriority+0x50>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	440b      	add	r3, r1
 80012de:	761a      	strb	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f1c3 0307 	rsb	r3, r3, #7
 800130e:	2b04      	cmp	r3, #4
 8001310:	bf28      	it	cs
 8001312:	2304      	movcs	r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3304      	adds	r3, #4
 800131a:	2b06      	cmp	r3, #6
 800131c:	d902      	bls.n	8001324 <NVIC_EncodePriority+0x30>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b03      	subs	r3, #3
 8001322:	e000      	b.n	8001326 <NVIC_EncodePriority+0x32>
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133c:	f04f 31ff 	mov.w	r1, #4294967295
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43d9      	mvns	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
         );
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	; 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001368:	d301      	bcc.n	800136e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136a:	2301      	movs	r3, #1
 800136c:	e00f      	b.n	800138e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <SysTick_Config+0x40>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001376:	210f      	movs	r1, #15
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	f7ff ff90 	bl	80012a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <SysTick_Config+0x40>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <SysTick_Config+0x40>)
 8001388:	2207      	movs	r2, #7
 800138a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff2d 	bl	8001204 <__NVIC_SetPriorityGrouping>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c4:	f7ff ff42 	bl	800124c <__NVIC_GetPriorityGrouping>
 80013c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	6978      	ldr	r0, [r7, #20]
 80013d0:	f7ff ff90 	bl	80012f4 <NVIC_EncodePriority>
 80013d4:	4602      	mov	r2, r0
 80013d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff5f 	bl	80012a0 <__NVIC_SetPriority>
}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff35 	bl	8001268 <__NVIC_EnableIRQ>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ffa2 	bl	8001358 <SysTick_Config>
 8001414:	4603      	mov	r3, r0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001420:	b480      	push	{r7}
 8001422:	b08b      	sub	sp, #44	; 0x2c
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800142a:	2300      	movs	r3, #0
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001432:	e169      	b.n	8001708 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001434:	2201      	movs	r2, #1
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	429a      	cmp	r2, r3
 800144e:	f040 8158 	bne.w	8001702 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	4a9a      	ldr	r2, [pc, #616]	; (80016c0 <HAL_GPIO_Init+0x2a0>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d05e      	beq.n	800151a <HAL_GPIO_Init+0xfa>
 800145c:	4a98      	ldr	r2, [pc, #608]	; (80016c0 <HAL_GPIO_Init+0x2a0>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d875      	bhi.n	800154e <HAL_GPIO_Init+0x12e>
 8001462:	4a98      	ldr	r2, [pc, #608]	; (80016c4 <HAL_GPIO_Init+0x2a4>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d058      	beq.n	800151a <HAL_GPIO_Init+0xfa>
 8001468:	4a96      	ldr	r2, [pc, #600]	; (80016c4 <HAL_GPIO_Init+0x2a4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d86f      	bhi.n	800154e <HAL_GPIO_Init+0x12e>
 800146e:	4a96      	ldr	r2, [pc, #600]	; (80016c8 <HAL_GPIO_Init+0x2a8>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d052      	beq.n	800151a <HAL_GPIO_Init+0xfa>
 8001474:	4a94      	ldr	r2, [pc, #592]	; (80016c8 <HAL_GPIO_Init+0x2a8>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d869      	bhi.n	800154e <HAL_GPIO_Init+0x12e>
 800147a:	4a94      	ldr	r2, [pc, #592]	; (80016cc <HAL_GPIO_Init+0x2ac>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d04c      	beq.n	800151a <HAL_GPIO_Init+0xfa>
 8001480:	4a92      	ldr	r2, [pc, #584]	; (80016cc <HAL_GPIO_Init+0x2ac>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d863      	bhi.n	800154e <HAL_GPIO_Init+0x12e>
 8001486:	4a92      	ldr	r2, [pc, #584]	; (80016d0 <HAL_GPIO_Init+0x2b0>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d046      	beq.n	800151a <HAL_GPIO_Init+0xfa>
 800148c:	4a90      	ldr	r2, [pc, #576]	; (80016d0 <HAL_GPIO_Init+0x2b0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d85d      	bhi.n	800154e <HAL_GPIO_Init+0x12e>
 8001492:	2b12      	cmp	r3, #18
 8001494:	d82a      	bhi.n	80014ec <HAL_GPIO_Init+0xcc>
 8001496:	2b12      	cmp	r3, #18
 8001498:	d859      	bhi.n	800154e <HAL_GPIO_Init+0x12e>
 800149a:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <HAL_GPIO_Init+0x80>)
 800149c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a0:	0800151b 	.word	0x0800151b
 80014a4:	080014f5 	.word	0x080014f5
 80014a8:	08001507 	.word	0x08001507
 80014ac:	08001549 	.word	0x08001549
 80014b0:	0800154f 	.word	0x0800154f
 80014b4:	0800154f 	.word	0x0800154f
 80014b8:	0800154f 	.word	0x0800154f
 80014bc:	0800154f 	.word	0x0800154f
 80014c0:	0800154f 	.word	0x0800154f
 80014c4:	0800154f 	.word	0x0800154f
 80014c8:	0800154f 	.word	0x0800154f
 80014cc:	0800154f 	.word	0x0800154f
 80014d0:	0800154f 	.word	0x0800154f
 80014d4:	0800154f 	.word	0x0800154f
 80014d8:	0800154f 	.word	0x0800154f
 80014dc:	0800154f 	.word	0x0800154f
 80014e0:	0800154f 	.word	0x0800154f
 80014e4:	080014fd 	.word	0x080014fd
 80014e8:	08001511 	.word	0x08001511
 80014ec:	4a79      	ldr	r2, [pc, #484]	; (80016d4 <HAL_GPIO_Init+0x2b4>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d013      	beq.n	800151a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014f2:	e02c      	b.n	800154e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	623b      	str	r3, [r7, #32]
          break;
 80014fa:	e029      	b.n	8001550 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	3304      	adds	r3, #4
 8001502:	623b      	str	r3, [r7, #32]
          break;
 8001504:	e024      	b.n	8001550 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	3308      	adds	r3, #8
 800150c:	623b      	str	r3, [r7, #32]
          break;
 800150e:	e01f      	b.n	8001550 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	330c      	adds	r3, #12
 8001516:	623b      	str	r3, [r7, #32]
          break;
 8001518:	e01a      	b.n	8001550 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001522:	2304      	movs	r3, #4
 8001524:	623b      	str	r3, [r7, #32]
          break;
 8001526:	e013      	b.n	8001550 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d105      	bne.n	800153c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001530:	2308      	movs	r3, #8
 8001532:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	611a      	str	r2, [r3, #16]
          break;
 800153a:	e009      	b.n	8001550 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800153c:	2308      	movs	r3, #8
 800153e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	615a      	str	r2, [r3, #20]
          break;
 8001546:	e003      	b.n	8001550 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001548:	2300      	movs	r3, #0
 800154a:	623b      	str	r3, [r7, #32]
          break;
 800154c:	e000      	b.n	8001550 <HAL_GPIO_Init+0x130>
          break;
 800154e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2bff      	cmp	r3, #255	; 0xff
 8001554:	d801      	bhi.n	800155a <HAL_GPIO_Init+0x13a>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	e001      	b.n	800155e <HAL_GPIO_Init+0x13e>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3304      	adds	r3, #4
 800155e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	2bff      	cmp	r3, #255	; 0xff
 8001564:	d802      	bhi.n	800156c <HAL_GPIO_Init+0x14c>
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	e002      	b.n	8001572 <HAL_GPIO_Init+0x152>
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	3b08      	subs	r3, #8
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	210f      	movs	r1, #15
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	fa01 f303 	lsl.w	r3, r1, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	401a      	ands	r2, r3
 8001584:	6a39      	ldr	r1, [r7, #32]
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	fa01 f303 	lsl.w	r3, r1, r3
 800158c:	431a      	orrs	r2, r3
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 80b1 	beq.w	8001702 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015a0:	4b4d      	ldr	r3, [pc, #308]	; (80016d8 <HAL_GPIO_Init+0x2b8>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a4c      	ldr	r2, [pc, #304]	; (80016d8 <HAL_GPIO_Init+0x2b8>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b4a      	ldr	r3, [pc, #296]	; (80016d8 <HAL_GPIO_Init+0x2b8>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015b8:	4a48      	ldr	r2, [pc, #288]	; (80016dc <HAL_GPIO_Init+0x2bc>)
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	3302      	adds	r3, #2
 80015c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	220f      	movs	r2, #15
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	4013      	ands	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a40      	ldr	r2, [pc, #256]	; (80016e0 <HAL_GPIO_Init+0x2c0>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d013      	beq.n	800160c <HAL_GPIO_Init+0x1ec>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a3f      	ldr	r2, [pc, #252]	; (80016e4 <HAL_GPIO_Init+0x2c4>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d00d      	beq.n	8001608 <HAL_GPIO_Init+0x1e8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a3e      	ldr	r2, [pc, #248]	; (80016e8 <HAL_GPIO_Init+0x2c8>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d007      	beq.n	8001604 <HAL_GPIO_Init+0x1e4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a3d      	ldr	r2, [pc, #244]	; (80016ec <HAL_GPIO_Init+0x2cc>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d101      	bne.n	8001600 <HAL_GPIO_Init+0x1e0>
 80015fc:	2303      	movs	r3, #3
 80015fe:	e006      	b.n	800160e <HAL_GPIO_Init+0x1ee>
 8001600:	2304      	movs	r3, #4
 8001602:	e004      	b.n	800160e <HAL_GPIO_Init+0x1ee>
 8001604:	2302      	movs	r3, #2
 8001606:	e002      	b.n	800160e <HAL_GPIO_Init+0x1ee>
 8001608:	2301      	movs	r3, #1
 800160a:	e000      	b.n	800160e <HAL_GPIO_Init+0x1ee>
 800160c:	2300      	movs	r3, #0
 800160e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001610:	f002 0203 	and.w	r2, r2, #3
 8001614:	0092      	lsls	r2, r2, #2
 8001616:	4093      	lsls	r3, r2
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	4313      	orrs	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800161e:	492f      	ldr	r1, [pc, #188]	; (80016dc <HAL_GPIO_Init+0x2bc>)
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	089b      	lsrs	r3, r3, #2
 8001624:	3302      	adds	r3, #2
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d006      	beq.n	8001646 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001638:	4b2d      	ldr	r3, [pc, #180]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	492c      	ldr	r1, [pc, #176]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	608b      	str	r3, [r1, #8]
 8001644:	e006      	b.n	8001654 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001646:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	43db      	mvns	r3, r3
 800164e:	4928      	ldr	r1, [pc, #160]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 8001650:	4013      	ands	r3, r2
 8001652:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d006      	beq.n	800166e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001660:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	4922      	ldr	r1, [pc, #136]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	60cb      	str	r3, [r1, #12]
 800166c:	e006      	b.n	800167c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 8001670:	68da      	ldr	r2, [r3, #12]
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	43db      	mvns	r3, r3
 8001676:	491e      	ldr	r1, [pc, #120]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 8001678:	4013      	ands	r3, r2
 800167a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d006      	beq.n	8001696 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	4918      	ldr	r1, [pc, #96]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
 8001694:	e006      	b.n	80016a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	43db      	mvns	r3, r3
 800169e:	4914      	ldr	r1, [pc, #80]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d021      	beq.n	80016f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	490e      	ldr	r1, [pc, #56]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	600b      	str	r3, [r1, #0]
 80016bc:	e021      	b.n	8001702 <HAL_GPIO_Init+0x2e2>
 80016be:	bf00      	nop
 80016c0:	10320000 	.word	0x10320000
 80016c4:	10310000 	.word	0x10310000
 80016c8:	10220000 	.word	0x10220000
 80016cc:	10210000 	.word	0x10210000
 80016d0:	10120000 	.word	0x10120000
 80016d4:	10110000 	.word	0x10110000
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40010000 	.word	0x40010000
 80016e0:	40010800 	.word	0x40010800
 80016e4:	40010c00 	.word	0x40010c00
 80016e8:	40011000 	.word	0x40011000
 80016ec:	40011400 	.word	0x40011400
 80016f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_GPIO_Init+0x304>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	4909      	ldr	r1, [pc, #36]	; (8001724 <HAL_GPIO_Init+0x304>)
 80016fe:	4013      	ands	r3, r2
 8001700:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	3301      	adds	r3, #1
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	fa22 f303 	lsr.w	r3, r2, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	f47f ae8e 	bne.w	8001434 <HAL_GPIO_Init+0x14>
  }
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	372c      	adds	r7, #44	; 0x2c
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	40010400 	.word	0x40010400

08001728 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	887b      	ldrh	r3, [r7, #2]
 800173a:	4013      	ands	r3, r2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001740:	2301      	movs	r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]
 8001744:	e001      	b.n	800174a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr

08001756 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	460b      	mov	r3, r1
 8001760:	807b      	strh	r3, [r7, #2]
 8001762:	4613      	mov	r3, r2
 8001764:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001766:	787b      	ldrb	r3, [r7, #1]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800176c:	887a      	ldrh	r2, [r7, #2]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001772:	e003      	b.n	800177c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001774:	887b      	ldrh	r3, [r7, #2]
 8001776:	041a      	lsls	r2, r3, #16
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	611a      	str	r2, [r3, #16]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001786:	b480      	push	{r7}
 8001788:	b085      	sub	sp, #20
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	460b      	mov	r3, r1
 8001790:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001798:	887a      	ldrh	r2, [r7, #2]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4013      	ands	r3, r2
 800179e:	041a      	lsls	r2, r3, #16
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	43d9      	mvns	r1, r3
 80017a4:	887b      	ldrh	r3, [r7, #2]
 80017a6:	400b      	ands	r3, r1
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	611a      	str	r2, [r3, #16]
}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e12b      	b.n	8001a22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d106      	bne.n	80017e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff fb18 	bl	8000e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2224      	movs	r2, #36	; 0x24
 80017e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0201 	bic.w	r2, r2, #1
 80017fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800180a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800181a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800181c:	f001 f830 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 8001820:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4a81      	ldr	r2, [pc, #516]	; (8001a2c <HAL_I2C_Init+0x274>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d807      	bhi.n	800183c <HAL_I2C_Init+0x84>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4a80      	ldr	r2, [pc, #512]	; (8001a30 <HAL_I2C_Init+0x278>)
 8001830:	4293      	cmp	r3, r2
 8001832:	bf94      	ite	ls
 8001834:	2301      	movls	r3, #1
 8001836:	2300      	movhi	r3, #0
 8001838:	b2db      	uxtb	r3, r3
 800183a:	e006      	b.n	800184a <HAL_I2C_Init+0x92>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4a7d      	ldr	r2, [pc, #500]	; (8001a34 <HAL_I2C_Init+0x27c>)
 8001840:	4293      	cmp	r3, r2
 8001842:	bf94      	ite	ls
 8001844:	2301      	movls	r3, #1
 8001846:	2300      	movhi	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e0e7      	b.n	8001a22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4a78      	ldr	r2, [pc, #480]	; (8001a38 <HAL_I2C_Init+0x280>)
 8001856:	fba2 2303 	umull	r2, r3, r2, r3
 800185a:	0c9b      	lsrs	r3, r3, #18
 800185c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	430a      	orrs	r2, r1
 8001870:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	4a6a      	ldr	r2, [pc, #424]	; (8001a2c <HAL_I2C_Init+0x274>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d802      	bhi.n	800188c <HAL_I2C_Init+0xd4>
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	3301      	adds	r3, #1
 800188a:	e009      	b.n	80018a0 <HAL_I2C_Init+0xe8>
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001892:	fb02 f303 	mul.w	r3, r2, r3
 8001896:	4a69      	ldr	r2, [pc, #420]	; (8001a3c <HAL_I2C_Init+0x284>)
 8001898:	fba2 2303 	umull	r2, r3, r2, r3
 800189c:	099b      	lsrs	r3, r3, #6
 800189e:	3301      	adds	r3, #1
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	430b      	orrs	r3, r1
 80018a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	495c      	ldr	r1, [pc, #368]	; (8001a2c <HAL_I2C_Init+0x274>)
 80018bc:	428b      	cmp	r3, r1
 80018be:	d819      	bhi.n	80018f4 <HAL_I2C_Init+0x13c>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	1e59      	subs	r1, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80018ce:	1c59      	adds	r1, r3, #1
 80018d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018d4:	400b      	ands	r3, r1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00a      	beq.n	80018f0 <HAL_I2C_Init+0x138>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	1e59      	subs	r1, r3, #1
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80018e8:	3301      	adds	r3, #1
 80018ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ee:	e051      	b.n	8001994 <HAL_I2C_Init+0x1dc>
 80018f0:	2304      	movs	r3, #4
 80018f2:	e04f      	b.n	8001994 <HAL_I2C_Init+0x1dc>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d111      	bne.n	8001920 <HAL_I2C_Init+0x168>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	1e58      	subs	r0, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6859      	ldr	r1, [r3, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	440b      	add	r3, r1
 800190a:	fbb0 f3f3 	udiv	r3, r0, r3
 800190e:	3301      	adds	r3, #1
 8001910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001914:	2b00      	cmp	r3, #0
 8001916:	bf0c      	ite	eq
 8001918:	2301      	moveq	r3, #1
 800191a:	2300      	movne	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	e012      	b.n	8001946 <HAL_I2C_Init+0x18e>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	1e58      	subs	r0, r3, #1
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6859      	ldr	r1, [r3, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	0099      	lsls	r1, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	fbb0 f3f3 	udiv	r3, r0, r3
 8001936:	3301      	adds	r3, #1
 8001938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800193c:	2b00      	cmp	r3, #0
 800193e:	bf0c      	ite	eq
 8001940:	2301      	moveq	r3, #1
 8001942:	2300      	movne	r3, #0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_I2C_Init+0x196>
 800194a:	2301      	movs	r3, #1
 800194c:	e022      	b.n	8001994 <HAL_I2C_Init+0x1dc>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10e      	bne.n	8001974 <HAL_I2C_Init+0x1bc>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1e58      	subs	r0, r3, #1
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6859      	ldr	r1, [r3, #4]
 800195e:	460b      	mov	r3, r1
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	440b      	add	r3, r1
 8001964:	fbb0 f3f3 	udiv	r3, r0, r3
 8001968:	3301      	adds	r3, #1
 800196a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800196e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001972:	e00f      	b.n	8001994 <HAL_I2C_Init+0x1dc>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	1e58      	subs	r0, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6859      	ldr	r1, [r3, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	0099      	lsls	r1, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	fbb0 f3f3 	udiv	r3, r0, r3
 800198a:	3301      	adds	r3, #1
 800198c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001990:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	6809      	ldr	r1, [r1, #0]
 8001998:	4313      	orrs	r3, r2
 800199a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69da      	ldr	r2, [r3, #28]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6911      	ldr	r1, [r2, #16]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68d2      	ldr	r2, [r2, #12]
 80019ce:	4311      	orrs	r1, r2
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	430b      	orrs	r3, r1
 80019d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695a      	ldr	r2, [r3, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 0201 	orr.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	000186a0 	.word	0x000186a0
 8001a30:	001e847f 	.word	0x001e847f
 8001a34:	003d08ff 	.word	0x003d08ff
 8001a38:	431bde83 	.word	0x431bde83
 8001a3c:	10624dd3 	.word	0x10624dd3

08001a40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	817b      	strh	r3, [r7, #10]
 8001a50:	4613      	mov	r3, r2
 8001a52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a54:	f7ff fba8 	bl	80011a8 <HAL_GetTick>
 8001a58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b20      	cmp	r3, #32
 8001a64:	f040 80e0 	bne.w	8001c28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2319      	movs	r3, #25
 8001a6e:	2201      	movs	r2, #1
 8001a70:	4970      	ldr	r1, [pc, #448]	; (8001c34 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 f964 	bl	8001d40 <I2C_WaitOnFlagUntilTimeout>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e0d3      	b.n	8001c2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <HAL_I2C_Master_Transmit+0x50>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e0cc      	b.n	8001c2a <HAL_I2C_Master_Transmit+0x1ea>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d007      	beq.n	8001ab6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f042 0201 	orr.w	r2, r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ac4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2221      	movs	r2, #33	; 0x21
 8001aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2210      	movs	r2, #16
 8001ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	893a      	ldrh	r2, [r7, #8]
 8001ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4a50      	ldr	r2, [pc, #320]	; (8001c38 <HAL_I2C_Master_Transmit+0x1f8>)
 8001af6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001af8:	8979      	ldrh	r1, [r7, #10]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	6a3a      	ldr	r2, [r7, #32]
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 f89c 	bl	8001c3c <I2C_MasterRequestWrite>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e08d      	b.n	8001c2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b24:	e066      	b.n	8001bf4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	6a39      	ldr	r1, [r7, #32]
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 fa22 	bl	8001f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00d      	beq.n	8001b52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d107      	bne.n	8001b4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e06b      	b.n	8001c2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	781a      	ldrb	r2, [r3, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d11b      	bne.n	8001bc8 <HAL_I2C_Master_Transmit+0x188>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d017      	beq.n	8001bc8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	781a      	ldrb	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	6a39      	ldr	r1, [r7, #32]
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f000 fa19 	bl	8002004 <I2C_WaitOnBTFFlagUntilTimeout>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00d      	beq.n	8001bf4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d107      	bne.n	8001bf0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e01a      	b.n	8001c2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d194      	bne.n	8001b26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	e000      	b.n	8001c2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c28:	2302      	movs	r3, #2
  }
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	00100002 	.word	0x00100002
 8001c38:	ffff0000 	.word	0xffff0000

08001c3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	607a      	str	r2, [r7, #4]
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d006      	beq.n	8001c66 <I2C_MasterRequestWrite+0x2a>
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d003      	beq.n	8001c66 <I2C_MasterRequestWrite+0x2a>
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c64:	d108      	bne.n	8001c78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	e00b      	b.n	8001c90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	2b12      	cmp	r3, #18
 8001c7e:	d107      	bne.n	8001c90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 f84f 	bl	8001d40 <I2C_WaitOnFlagUntilTimeout>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00d      	beq.n	8001cc4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cb6:	d103      	bne.n	8001cc0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e035      	b.n	8001d30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ccc:	d108      	bne.n	8001ce0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cce:	897b      	ldrh	r3, [r7, #10]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cdc:	611a      	str	r2, [r3, #16]
 8001cde:	e01b      	b.n	8001d18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ce0:	897b      	ldrh	r3, [r7, #10]
 8001ce2:	11db      	asrs	r3, r3, #7
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	f003 0306 	and.w	r3, r3, #6
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	f063 030f 	orn	r3, r3, #15
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	490e      	ldr	r1, [pc, #56]	; (8001d38 <I2C_MasterRequestWrite+0xfc>)
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 f898 	bl	8001e34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e010      	b.n	8001d30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d0e:	897b      	ldrh	r3, [r7, #10]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	4907      	ldr	r1, [pc, #28]	; (8001d3c <I2C_MasterRequestWrite+0x100>)
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 f888 	bl	8001e34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	00010008 	.word	0x00010008
 8001d3c:	00010002 	.word	0x00010002

08001d40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d50:	e048      	b.n	8001de4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d044      	beq.n	8001de4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d5a:	f7ff fa25 	bl	80011a8 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d302      	bcc.n	8001d70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d139      	bne.n	8001de4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	0c1b      	lsrs	r3, r3, #16
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d10d      	bne.n	8001d96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	43da      	mvns	r2, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	4013      	ands	r3, r2
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	bf0c      	ite	eq
 8001d8c:	2301      	moveq	r3, #1
 8001d8e:	2300      	movne	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	461a      	mov	r2, r3
 8001d94:	e00c      	b.n	8001db0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	43da      	mvns	r2, r3
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	4013      	ands	r3, r2
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf0c      	ite	eq
 8001da8:	2301      	moveq	r3, #1
 8001daa:	2300      	movne	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d116      	bne.n	8001de4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	f043 0220 	orr.w	r2, r3, #32
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e023      	b.n	8001e2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	0c1b      	lsrs	r3, r3, #16
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d10d      	bne.n	8001e0a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	43da      	mvns	r2, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bf0c      	ite	eq
 8001e00:	2301      	moveq	r3, #1
 8001e02:	2300      	movne	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	e00c      	b.n	8001e24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	43da      	mvns	r2, r3
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	4013      	ands	r3, r2
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf0c      	ite	eq
 8001e1c:	2301      	moveq	r3, #1
 8001e1e:	2300      	movne	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	461a      	mov	r2, r3
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d093      	beq.n	8001d52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e42:	e071      	b.n	8001f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e52:	d123      	bne.n	8001e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	f043 0204 	orr.w	r2, r3, #4
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e067      	b.n	8001f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea2:	d041      	beq.n	8001f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ea4:	f7ff f980 	bl	80011a8 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d302      	bcc.n	8001eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d136      	bne.n	8001f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	0c1b      	lsrs	r3, r3, #16
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d10c      	bne.n	8001ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	bf14      	ite	ne
 8001ed6:	2301      	movne	r3, #1
 8001ed8:	2300      	moveq	r3, #0
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	e00b      	b.n	8001ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	43da      	mvns	r2, r3
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	bf14      	ite	ne
 8001ef0:	2301      	movne	r3, #1
 8001ef2:	2300      	moveq	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d016      	beq.n	8001f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2220      	movs	r2, #32
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	f043 0220 	orr.w	r2, r3, #32
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e021      	b.n	8001f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d10c      	bne.n	8001f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	43da      	mvns	r2, r3
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf14      	ite	ne
 8001f44:	2301      	movne	r3, #1
 8001f46:	2300      	moveq	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	e00b      	b.n	8001f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4013      	ands	r3, r2
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	bf14      	ite	ne
 8001f5e:	2301      	movne	r3, #1
 8001f60:	2300      	moveq	r3, #0
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f47f af6d 	bne.w	8001e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f80:	e034      	b.n	8001fec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 f886 	bl	8002094 <I2C_IsAcknowledgeFailed>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e034      	b.n	8001ffc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f98:	d028      	beq.n	8001fec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f9a:	f7ff f905 	bl	80011a8 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d302      	bcc.n	8001fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d11d      	bne.n	8001fec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fba:	2b80      	cmp	r3, #128	; 0x80
 8001fbc:	d016      	beq.n	8001fec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f043 0220 	orr.w	r2, r3, #32
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e007      	b.n	8001ffc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff6:	2b80      	cmp	r3, #128	; 0x80
 8001ff8:	d1c3      	bne.n	8001f82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002010:	e034      	b.n	800207c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 f83e 	bl	8002094 <I2C_IsAcknowledgeFailed>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e034      	b.n	800208c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002028:	d028      	beq.n	800207c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800202a:	f7ff f8bd 	bl	80011a8 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	429a      	cmp	r2, r3
 8002038:	d302      	bcc.n	8002040 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d11d      	bne.n	800207c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b04      	cmp	r3, #4
 800204c:	d016      	beq.n	800207c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2220      	movs	r2, #32
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	f043 0220 	orr.w	r2, r3, #32
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e007      	b.n	800208c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b04      	cmp	r3, #4
 8002088:	d1c3      	bne.n	8002012 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020aa:	d11b      	bne.n	80020e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	f043 0204 	orr.w	r2, r3, #4
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e26c      	b.n	80025dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 8087 	beq.w	800221e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002110:	4b92      	ldr	r3, [pc, #584]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 030c 	and.w	r3, r3, #12
 8002118:	2b04      	cmp	r3, #4
 800211a:	d00c      	beq.n	8002136 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800211c:	4b8f      	ldr	r3, [pc, #572]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 030c 	and.w	r3, r3, #12
 8002124:	2b08      	cmp	r3, #8
 8002126:	d112      	bne.n	800214e <HAL_RCC_OscConfig+0x5e>
 8002128:	4b8c      	ldr	r3, [pc, #560]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002134:	d10b      	bne.n	800214e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002136:	4b89      	ldr	r3, [pc, #548]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d06c      	beq.n	800221c <HAL_RCC_OscConfig+0x12c>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d168      	bne.n	800221c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e246      	b.n	80025dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002156:	d106      	bne.n	8002166 <HAL_RCC_OscConfig+0x76>
 8002158:	4b80      	ldr	r3, [pc, #512]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a7f      	ldr	r2, [pc, #508]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 800215e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	e02e      	b.n	80021c4 <HAL_RCC_OscConfig+0xd4>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10c      	bne.n	8002188 <HAL_RCC_OscConfig+0x98>
 800216e:	4b7b      	ldr	r3, [pc, #492]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a7a      	ldr	r2, [pc, #488]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	4b78      	ldr	r3, [pc, #480]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a77      	ldr	r2, [pc, #476]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002180:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e01d      	b.n	80021c4 <HAL_RCC_OscConfig+0xd4>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0xbc>
 8002192:	4b72      	ldr	r3, [pc, #456]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a71      	ldr	r2, [pc, #452]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	4b6f      	ldr	r3, [pc, #444]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a6e      	ldr	r2, [pc, #440]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 80021a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e00b      	b.n	80021c4 <HAL_RCC_OscConfig+0xd4>
 80021ac:	4b6b      	ldr	r3, [pc, #428]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a6a      	ldr	r2, [pc, #424]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 80021b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	4b68      	ldr	r3, [pc, #416]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a67      	ldr	r2, [pc, #412]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 80021be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d013      	beq.n	80021f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7fe ffec 	bl	80011a8 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d4:	f7fe ffe8 	bl	80011a8 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	; 0x64
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e1fa      	b.n	80025dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	4b5d      	ldr	r3, [pc, #372]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0xe4>
 80021f2:	e014      	b.n	800221e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7fe ffd8 	bl	80011a8 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021fc:	f7fe ffd4 	bl	80011a8 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	; 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e1e6      	b.n	80025dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220e:	4b53      	ldr	r3, [pc, #332]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x10c>
 800221a:	e000      	b.n	800221e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d063      	beq.n	80022f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800222a:	4b4c      	ldr	r3, [pc, #304]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00b      	beq.n	800224e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002236:	4b49      	ldr	r3, [pc, #292]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b08      	cmp	r3, #8
 8002240:	d11c      	bne.n	800227c <HAL_RCC_OscConfig+0x18c>
 8002242:	4b46      	ldr	r3, [pc, #280]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d116      	bne.n	800227c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224e:	4b43      	ldr	r3, [pc, #268]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_RCC_OscConfig+0x176>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d001      	beq.n	8002266 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e1ba      	b.n	80025dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002266:	4b3d      	ldr	r3, [pc, #244]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4939      	ldr	r1, [pc, #228]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227a:	e03a      	b.n	80022f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d020      	beq.n	80022c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002284:	4b36      	ldr	r3, [pc, #216]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 8002286:	2201      	movs	r2, #1
 8002288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228a:	f7fe ff8d 	bl	80011a8 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002292:	f7fe ff89 	bl	80011a8 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e19b      	b.n	80025dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a4:	4b2d      	ldr	r3, [pc, #180]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b0:	4b2a      	ldr	r3, [pc, #168]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4927      	ldr	r1, [pc, #156]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	600b      	str	r3, [r1, #0]
 80022c4:	e015      	b.n	80022f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c6:	4b26      	ldr	r3, [pc, #152]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7fe ff6c 	bl	80011a8 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d4:	f7fe ff68 	bl	80011a8 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e17a      	b.n	80025dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e6:	4b1d      	ldr	r3, [pc, #116]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d03a      	beq.n	8002374 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d019      	beq.n	800233a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002306:	4b17      	ldr	r3, [pc, #92]	; (8002364 <HAL_RCC_OscConfig+0x274>)
 8002308:	2201      	movs	r2, #1
 800230a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230c:	f7fe ff4c 	bl	80011a8 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002314:	f7fe ff48 	bl	80011a8 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e15a      	b.n	80025dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002326:	4b0d      	ldr	r3, [pc, #52]	; (800235c <HAL_RCC_OscConfig+0x26c>)
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002332:	2001      	movs	r0, #1
 8002334:	f000 fab8 	bl	80028a8 <RCC_Delay>
 8002338:	e01c      	b.n	8002374 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <HAL_RCC_OscConfig+0x274>)
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002340:	f7fe ff32 	bl	80011a8 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002346:	e00f      	b.n	8002368 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002348:	f7fe ff2e 	bl	80011a8 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d908      	bls.n	8002368 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e140      	b.n	80025dc <HAL_RCC_OscConfig+0x4ec>
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000
 8002360:	42420000 	.word	0x42420000
 8002364:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002368:	4b9e      	ldr	r3, [pc, #632]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1e9      	bne.n	8002348 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80a6 	beq.w	80024ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002382:	2300      	movs	r3, #0
 8002384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002386:	4b97      	ldr	r3, [pc, #604]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10d      	bne.n	80023ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002392:	4b94      	ldr	r3, [pc, #592]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	4a93      	ldr	r2, [pc, #588]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 8002398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239c:	61d3      	str	r3, [r2, #28]
 800239e:	4b91      	ldr	r3, [pc, #580]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023aa:	2301      	movs	r3, #1
 80023ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ae:	4b8e      	ldr	r3, [pc, #568]	; (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d118      	bne.n	80023ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ba:	4b8b      	ldr	r3, [pc, #556]	; (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a8a      	ldr	r2, [pc, #552]	; (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 80023c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c6:	f7fe feef 	bl	80011a8 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ce:	f7fe feeb 	bl	80011a8 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b64      	cmp	r3, #100	; 0x64
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e0fd      	b.n	80025dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e0:	4b81      	ldr	r3, [pc, #516]	; (80025e8 <HAL_RCC_OscConfig+0x4f8>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d106      	bne.n	8002402 <HAL_RCC_OscConfig+0x312>
 80023f4:	4b7b      	ldr	r3, [pc, #492]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4a7a      	ldr	r2, [pc, #488]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6213      	str	r3, [r2, #32]
 8002400:	e02d      	b.n	800245e <HAL_RCC_OscConfig+0x36e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x334>
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4a75      	ldr	r2, [pc, #468]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	6213      	str	r3, [r2, #32]
 8002416:	4b73      	ldr	r3, [pc, #460]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	4a72      	ldr	r2, [pc, #456]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 800241c:	f023 0304 	bic.w	r3, r3, #4
 8002420:	6213      	str	r3, [r2, #32]
 8002422:	e01c      	b.n	800245e <HAL_RCC_OscConfig+0x36e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b05      	cmp	r3, #5
 800242a:	d10c      	bne.n	8002446 <HAL_RCC_OscConfig+0x356>
 800242c:	4b6d      	ldr	r3, [pc, #436]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	4a6c      	ldr	r2, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 8002432:	f043 0304 	orr.w	r3, r3, #4
 8002436:	6213      	str	r3, [r2, #32]
 8002438:	4b6a      	ldr	r3, [pc, #424]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4a69      	ldr	r2, [pc, #420]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	6213      	str	r3, [r2, #32]
 8002444:	e00b      	b.n	800245e <HAL_RCC_OscConfig+0x36e>
 8002446:	4b67      	ldr	r3, [pc, #412]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4a66      	ldr	r2, [pc, #408]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 800244c:	f023 0301 	bic.w	r3, r3, #1
 8002450:	6213      	str	r3, [r2, #32]
 8002452:	4b64      	ldr	r3, [pc, #400]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	4a63      	ldr	r2, [pc, #396]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 8002458:	f023 0304 	bic.w	r3, r3, #4
 800245c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d015      	beq.n	8002492 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002466:	f7fe fe9f 	bl	80011a8 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246c:	e00a      	b.n	8002484 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246e:	f7fe fe9b 	bl	80011a8 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f241 3288 	movw	r2, #5000	; 0x1388
 800247c:	4293      	cmp	r3, r2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e0ab      	b.n	80025dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002484:	4b57      	ldr	r3, [pc, #348]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0ee      	beq.n	800246e <HAL_RCC_OscConfig+0x37e>
 8002490:	e014      	b.n	80024bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002492:	f7fe fe89 	bl	80011a8 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002498:	e00a      	b.n	80024b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fe85 	bl	80011a8 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e095      	b.n	80025dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b0:	4b4c      	ldr	r3, [pc, #304]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1ee      	bne.n	800249a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d105      	bne.n	80024ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c2:	4b48      	ldr	r3, [pc, #288]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	4a47      	ldr	r2, [pc, #284]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 80024c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 8081 	beq.w	80025da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d8:	4b42      	ldr	r3, [pc, #264]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 030c 	and.w	r3, r3, #12
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d061      	beq.n	80025a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d146      	bne.n	800257a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ec:	4b3f      	ldr	r3, [pc, #252]	; (80025ec <HAL_RCC_OscConfig+0x4fc>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f2:	f7fe fe59 	bl	80011a8 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fa:	f7fe fe55 	bl	80011a8 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e067      	b.n	80025dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800250c:	4b35      	ldr	r3, [pc, #212]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1f0      	bne.n	80024fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002520:	d108      	bne.n	8002534 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002522:	4b30      	ldr	r3, [pc, #192]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	492d      	ldr	r1, [pc, #180]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002534:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a19      	ldr	r1, [r3, #32]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	430b      	orrs	r3, r1
 8002546:	4927      	ldr	r1, [pc, #156]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800254c:	4b27      	ldr	r3, [pc, #156]	; (80025ec <HAL_RCC_OscConfig+0x4fc>)
 800254e:	2201      	movs	r2, #1
 8002550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7fe fe29 	bl	80011a8 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255a:	f7fe fe25 	bl	80011a8 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e037      	b.n	80025dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800256c:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x46a>
 8002578:	e02f      	b.n	80025da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257a:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <HAL_RCC_OscConfig+0x4fc>)
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7fe fe12 	bl	80011a8 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002588:	f7fe fe0e 	bl	80011a8 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e020      	b.n	80025dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259a:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x498>
 80025a6:	e018      	b.n	80025da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e013      	b.n	80025dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_RCC_OscConfig+0x4f4>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d106      	bne.n	80025d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d001      	beq.n	80025da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40007000 	.word	0x40007000
 80025ec:	42420060 	.word	0x42420060

080025f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0d0      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002604:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d910      	bls.n	8002634 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b67      	ldr	r3, [pc, #412]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 0207 	bic.w	r2, r3, #7
 800261a:	4965      	ldr	r1, [pc, #404]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b63      	ldr	r3, [pc, #396]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0b8      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800264c:	4b59      	ldr	r3, [pc, #356]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	4a58      	ldr	r2, [pc, #352]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002656:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002664:	4b53      	ldr	r3, [pc, #332]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4a52      	ldr	r2, [pc, #328]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800266e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002670:	4b50      	ldr	r3, [pc, #320]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	494d      	ldr	r1, [pc, #308]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	4313      	orrs	r3, r2
 8002680:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d040      	beq.n	8002710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b47      	ldr	r3, [pc, #284]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d115      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e07f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ae:	4b41      	ldr	r3, [pc, #260]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e073      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e06b      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ce:	4b39      	ldr	r3, [pc, #228]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f023 0203 	bic.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4936      	ldr	r1, [pc, #216]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e0:	f7fe fd62 	bl	80011a8 <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7fe fd5e 	bl	80011a8 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e053      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	4b2d      	ldr	r3, [pc, #180]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 020c 	and.w	r2, r3, #12
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	429a      	cmp	r2, r3
 800270e:	d1eb      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002710:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d210      	bcs.n	8002740 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b24      	ldr	r3, [pc, #144]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 0207 	bic.w	r2, r3, #7
 8002726:	4922      	ldr	r1, [pc, #136]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e032      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4916      	ldr	r1, [pc, #88]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800276a:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	490e      	ldr	r1, [pc, #56]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	4313      	orrs	r3, r2
 800277c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800277e:	f000 f821 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8002782:	4602      	mov	r2, r0
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	490a      	ldr	r1, [pc, #40]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002790:	5ccb      	ldrb	r3, [r1, r3]
 8002792:	fa22 f303 	lsr.w	r3, r2, r3
 8002796:	4a09      	ldr	r2, [pc, #36]	; (80027bc <HAL_RCC_ClockConfig+0x1cc>)
 8002798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_RCC_ClockConfig+0x1d0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fcc0 	bl	8001124 <HAL_InitTick>

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40022000 	.word	0x40022000
 80027b4:	40021000 	.word	0x40021000
 80027b8:	08003a04 	.word	0x08003a04
 80027bc:	20000070 	.word	0x20000070
 80027c0:	20000074 	.word	0x20000074

080027c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	2300      	movs	r3, #0
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	2300      	movs	r3, #0
 80027d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027de:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <HAL_RCC_GetSysClockFreq+0x94>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 030c 	and.w	r3, r3, #12
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d002      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0x30>
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d003      	beq.n	80027fa <HAL_RCC_GetSysClockFreq+0x36>
 80027f2:	e027      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027f4:	4b19      	ldr	r3, [pc, #100]	; (800285c <HAL_RCC_GetSysClockFreq+0x98>)
 80027f6:	613b      	str	r3, [r7, #16]
      break;
 80027f8:	e027      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	0c9b      	lsrs	r3, r3, #18
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	4a17      	ldr	r2, [pc, #92]	; (8002860 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002804:	5cd3      	ldrb	r3, [r2, r3]
 8002806:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d010      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002812:	4b11      	ldr	r3, [pc, #68]	; (8002858 <HAL_RCC_GetSysClockFreq+0x94>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	0c5b      	lsrs	r3, r3, #17
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	4a11      	ldr	r2, [pc, #68]	; (8002864 <HAL_RCC_GetSysClockFreq+0xa0>)
 800281e:	5cd3      	ldrb	r3, [r2, r3]
 8002820:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a0d      	ldr	r2, [pc, #52]	; (800285c <HAL_RCC_GetSysClockFreq+0x98>)
 8002826:	fb02 f203 	mul.w	r2, r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	e004      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a0c      	ldr	r2, [pc, #48]	; (8002868 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002838:	fb02 f303 	mul.w	r3, r2, r3
 800283c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	613b      	str	r3, [r7, #16]
      break;
 8002842:	e002      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_RCC_GetSysClockFreq+0x98>)
 8002846:	613b      	str	r3, [r7, #16]
      break;
 8002848:	bf00      	nop
    }
  }
  return sysclockfreq;
 800284a:	693b      	ldr	r3, [r7, #16]
}
 800284c:	4618      	mov	r0, r3
 800284e:	371c      	adds	r7, #28
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40021000 	.word	0x40021000
 800285c:	007a1200 	.word	0x007a1200
 8002860:	08003a1c 	.word	0x08003a1c
 8002864:	08003a2c 	.word	0x08003a2c
 8002868:	003d0900 	.word	0x003d0900

0800286c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002870:	4b02      	ldr	r3, [pc, #8]	; (800287c <HAL_RCC_GetHCLKFreq+0x10>)
 8002872:	681b      	ldr	r3, [r3, #0]
}
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	20000070 	.word	0x20000070

08002880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002884:	f7ff fff2 	bl	800286c <HAL_RCC_GetHCLKFreq>
 8002888:	4602      	mov	r2, r0
 800288a:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	4903      	ldr	r1, [pc, #12]	; (80028a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002896:	5ccb      	ldrb	r3, [r1, r3]
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800289c:	4618      	mov	r0, r3
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000
 80028a4:	08003a14 	.word	0x08003a14

080028a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028b0:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <RCC_Delay+0x34>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <RCC_Delay+0x38>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	0a5b      	lsrs	r3, r3, #9
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	fb02 f303 	mul.w	r3, r2, r3
 80028c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028c4:	bf00      	nop
  }
  while (Delay --);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1e5a      	subs	r2, r3, #1
 80028ca:	60fa      	str	r2, [r7, #12]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f9      	bne.n	80028c4 <RCC_Delay+0x1c>
}
 80028d0:	bf00      	nop
 80028d2:	bf00      	nop
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	20000070 	.word	0x20000070
 80028e0:	10624dd3 	.word	0x10624dd3

080028e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e041      	b.n	800297a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7fe fad2 	bl	8000eb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3304      	adds	r3, #4
 8002920:	4619      	mov	r1, r3
 8002922:	4610      	mov	r0, r2
 8002924:	f000 fa5c 	bl	8002de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b01      	cmp	r3, #1
 8002996:	d001      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e03a      	b.n	8002a12 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a18      	ldr	r2, [pc, #96]	; (8002a1c <HAL_TIM_Base_Start_IT+0x98>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00e      	beq.n	80029dc <HAL_TIM_Base_Start_IT+0x58>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c6:	d009      	beq.n	80029dc <HAL_TIM_Base_Start_IT+0x58>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a14      	ldr	r2, [pc, #80]	; (8002a20 <HAL_TIM_Base_Start_IT+0x9c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d004      	beq.n	80029dc <HAL_TIM_Base_Start_IT+0x58>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a13      	ldr	r2, [pc, #76]	; (8002a24 <HAL_TIM_Base_Start_IT+0xa0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d111      	bne.n	8002a00 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2b06      	cmp	r3, #6
 80029ec:	d010      	beq.n	8002a10 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0201 	orr.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029fe:	e007      	b.n	8002a10 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	40012c00 	.word	0x40012c00
 8002a20:	40000400 	.word	0x40000400
 8002a24:	40000800 	.word	0x40000800

08002a28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d020      	beq.n	8002a8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d01b      	beq.n	8002a8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0202 	mvn.w	r2, #2
 8002a5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f998 	bl	8002da8 <HAL_TIM_IC_CaptureCallback>
 8002a78:	e005      	b.n	8002a86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f98b 	bl	8002d96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f99a 	bl	8002dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d020      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d01b      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f06f 0204 	mvn.w	r2, #4
 8002aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2202      	movs	r2, #2
 8002aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f972 	bl	8002da8 <HAL_TIM_IC_CaptureCallback>
 8002ac4:	e005      	b.n	8002ad2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f965 	bl	8002d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f974 	bl	8002dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d020      	beq.n	8002b24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d01b      	beq.n	8002b24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0208 	mvn.w	r2, #8
 8002af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2204      	movs	r2, #4
 8002afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f94c 	bl	8002da8 <HAL_TIM_IC_CaptureCallback>
 8002b10:	e005      	b.n	8002b1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f93f 	bl	8002d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f94e 	bl	8002dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f003 0310 	and.w	r3, r3, #16
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d020      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d01b      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0210 	mvn.w	r2, #16
 8002b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2208      	movs	r2, #8
 8002b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f926 	bl	8002da8 <HAL_TIM_IC_CaptureCallback>
 8002b5c:	e005      	b.n	8002b6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f919 	bl	8002d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f928 	bl	8002dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00c      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d007      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0201 	mvn.w	r2, #1
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7fe fa80 	bl	8001094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00c      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d007      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fa7f 	bl	80030b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00c      	beq.n	8002bdc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f8f8 	bl	8002dcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00c      	beq.n	8002c00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d007      	beq.n	8002c00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0220 	mvn.w	r2, #32
 8002bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fa52 	bl	80030a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c00:	bf00      	nop
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_TIM_ConfigClockSource+0x1c>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e0b4      	b.n	8002d8e <HAL_TIM_ConfigClockSource+0x186>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c5c:	d03e      	beq.n	8002cdc <HAL_TIM_ConfigClockSource+0xd4>
 8002c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c62:	f200 8087 	bhi.w	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6a:	f000 8086 	beq.w	8002d7a <HAL_TIM_ConfigClockSource+0x172>
 8002c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c72:	d87f      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002c74:	2b70      	cmp	r3, #112	; 0x70
 8002c76:	d01a      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0xa6>
 8002c78:	2b70      	cmp	r3, #112	; 0x70
 8002c7a:	d87b      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002c7c:	2b60      	cmp	r3, #96	; 0x60
 8002c7e:	d050      	beq.n	8002d22 <HAL_TIM_ConfigClockSource+0x11a>
 8002c80:	2b60      	cmp	r3, #96	; 0x60
 8002c82:	d877      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002c84:	2b50      	cmp	r3, #80	; 0x50
 8002c86:	d03c      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0xfa>
 8002c88:	2b50      	cmp	r3, #80	; 0x50
 8002c8a:	d873      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002c8c:	2b40      	cmp	r3, #64	; 0x40
 8002c8e:	d058      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x13a>
 8002c90:	2b40      	cmp	r3, #64	; 0x40
 8002c92:	d86f      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002c94:	2b30      	cmp	r3, #48	; 0x30
 8002c96:	d064      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0x15a>
 8002c98:	2b30      	cmp	r3, #48	; 0x30
 8002c9a:	d86b      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d060      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0x15a>
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d867      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d05c      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0x15a>
 8002ca8:	2b10      	cmp	r3, #16
 8002caa:	d05a      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0x15a>
 8002cac:	e062      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6899      	ldr	r1, [r3, #8]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f000 f974 	bl	8002faa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	609a      	str	r2, [r3, #8]
      break;
 8002cda:	e04f      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	6899      	ldr	r1, [r3, #8]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f000 f95d 	bl	8002faa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cfe:	609a      	str	r2, [r3, #8]
      break;
 8002d00:	e03c      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6859      	ldr	r1, [r3, #4]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	f000 f8d4 	bl	8002ebc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2150      	movs	r1, #80	; 0x50
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f92b 	bl	8002f76 <TIM_ITRx_SetConfig>
      break;
 8002d20:	e02c      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6859      	ldr	r1, [r3, #4]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f000 f8f2 	bl	8002f18 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2160      	movs	r1, #96	; 0x60
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 f91b 	bl	8002f76 <TIM_ITRx_SetConfig>
      break;
 8002d40:	e01c      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6859      	ldr	r1, [r3, #4]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	f000 f8b4 	bl	8002ebc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2140      	movs	r1, #64	; 0x40
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f90b 	bl	8002f76 <TIM_ITRx_SetConfig>
      break;
 8002d60:	e00c      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	f000 f902 	bl	8002f76 <TIM_ITRx_SetConfig>
      break;
 8002d72:	e003      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
      break;
 8002d78:	e000      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr

08002dba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr
	...

08002de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a2f      	ldr	r2, [pc, #188]	; (8002eb0 <TIM_Base_SetConfig+0xd0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00b      	beq.n	8002e10 <TIM_Base_SetConfig+0x30>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfe:	d007      	beq.n	8002e10 <TIM_Base_SetConfig+0x30>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a2c      	ldr	r2, [pc, #176]	; (8002eb4 <TIM_Base_SetConfig+0xd4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d003      	beq.n	8002e10 <TIM_Base_SetConfig+0x30>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a2b      	ldr	r2, [pc, #172]	; (8002eb8 <TIM_Base_SetConfig+0xd8>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d108      	bne.n	8002e22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a22      	ldr	r2, [pc, #136]	; (8002eb0 <TIM_Base_SetConfig+0xd0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00b      	beq.n	8002e42 <TIM_Base_SetConfig+0x62>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e30:	d007      	beq.n	8002e42 <TIM_Base_SetConfig+0x62>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a1f      	ldr	r2, [pc, #124]	; (8002eb4 <TIM_Base_SetConfig+0xd4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d003      	beq.n	8002e42 <TIM_Base_SetConfig+0x62>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a1e      	ldr	r2, [pc, #120]	; (8002eb8 <TIM_Base_SetConfig+0xd8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d108      	bne.n	8002e54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a0d      	ldr	r2, [pc, #52]	; (8002eb0 <TIM_Base_SetConfig+0xd0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d103      	bne.n	8002e88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d005      	beq.n	8002ea6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f023 0201 	bic.w	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	611a      	str	r2, [r3, #16]
  }
}
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr
 8002eb0:	40012c00 	.word	0x40012c00
 8002eb4:	40000400 	.word	0x40000400
 8002eb8:	40000800 	.word	0x40000800

08002ebc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	f023 0201 	bic.w	r2, r3, #1
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f023 030a 	bic.w	r3, r3, #10
 8002ef8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	621a      	str	r2, [r3, #32]
}
 8002f0e:	bf00      	nop
 8002f10:	371c      	adds	r7, #28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	f023 0210 	bic.w	r2, r3, #16
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	031b      	lsls	r3, r3, #12
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	621a      	str	r2, [r3, #32]
}
 8002f6c:	bf00      	nop
 8002f6e:	371c      	adds	r7, #28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr

08002f76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b085      	sub	sp, #20
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f043 0307 	orr.w	r3, r3, #7
 8002f98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	609a      	str	r2, [r3, #8]
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr

08002faa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b087      	sub	sp, #28
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fc4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	021a      	lsls	r2, r3, #8
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	609a      	str	r2, [r3, #8]
}
 8002fde:	bf00      	nop
 8002fe0:	371c      	adds	r7, #28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e046      	b.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a16      	ldr	r2, [pc, #88]	; (8003098 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d00e      	beq.n	8003062 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304c:	d009      	beq.n	8003062 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a12      	ldr	r2, [pc, #72]	; (800309c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d004      	beq.n	8003062 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a10      	ldr	r2, [pc, #64]	; (80030a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d10c      	bne.n	800307c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003068:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	4313      	orrs	r3, r2
 8003072:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr
 8003098:	40012c00 	.word	0x40012c00
 800309c:	40000400 	.word	0x40000400
 80030a0:	40000800 	.word	0x40000800

080030a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr

080030b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <__errno>:
 80030c8:	4b01      	ldr	r3, [pc, #4]	; (80030d0 <__errno+0x8>)
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	2000007c 	.word	0x2000007c

080030d4 <__libc_init_array>:
 80030d4:	b570      	push	{r4, r5, r6, lr}
 80030d6:	2600      	movs	r6, #0
 80030d8:	4d0c      	ldr	r5, [pc, #48]	; (800310c <__libc_init_array+0x38>)
 80030da:	4c0d      	ldr	r4, [pc, #52]	; (8003110 <__libc_init_array+0x3c>)
 80030dc:	1b64      	subs	r4, r4, r5
 80030de:	10a4      	asrs	r4, r4, #2
 80030e0:	42a6      	cmp	r6, r4
 80030e2:	d109      	bne.n	80030f8 <__libc_init_array+0x24>
 80030e4:	f000 fc5c 	bl	80039a0 <_init>
 80030e8:	2600      	movs	r6, #0
 80030ea:	4d0a      	ldr	r5, [pc, #40]	; (8003114 <__libc_init_array+0x40>)
 80030ec:	4c0a      	ldr	r4, [pc, #40]	; (8003118 <__libc_init_array+0x44>)
 80030ee:	1b64      	subs	r4, r4, r5
 80030f0:	10a4      	asrs	r4, r4, #2
 80030f2:	42a6      	cmp	r6, r4
 80030f4:	d105      	bne.n	8003102 <__libc_init_array+0x2e>
 80030f6:	bd70      	pop	{r4, r5, r6, pc}
 80030f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030fc:	4798      	blx	r3
 80030fe:	3601      	adds	r6, #1
 8003100:	e7ee      	b.n	80030e0 <__libc_init_array+0xc>
 8003102:	f855 3b04 	ldr.w	r3, [r5], #4
 8003106:	4798      	blx	r3
 8003108:	3601      	adds	r6, #1
 800310a:	e7f2      	b.n	80030f2 <__libc_init_array+0x1e>
 800310c:	08003a64 	.word	0x08003a64
 8003110:	08003a64 	.word	0x08003a64
 8003114:	08003a64 	.word	0x08003a64
 8003118:	08003a68 	.word	0x08003a68

0800311c <memset>:
 800311c:	4603      	mov	r3, r0
 800311e:	4402      	add	r2, r0
 8003120:	4293      	cmp	r3, r2
 8003122:	d100      	bne.n	8003126 <memset+0xa>
 8003124:	4770      	bx	lr
 8003126:	f803 1b01 	strb.w	r1, [r3], #1
 800312a:	e7f9      	b.n	8003120 <memset+0x4>

0800312c <siprintf>:
 800312c:	b40e      	push	{r1, r2, r3}
 800312e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003132:	b500      	push	{lr}
 8003134:	b09c      	sub	sp, #112	; 0x70
 8003136:	ab1d      	add	r3, sp, #116	; 0x74
 8003138:	9002      	str	r0, [sp, #8]
 800313a:	9006      	str	r0, [sp, #24]
 800313c:	9107      	str	r1, [sp, #28]
 800313e:	9104      	str	r1, [sp, #16]
 8003140:	4808      	ldr	r0, [pc, #32]	; (8003164 <siprintf+0x38>)
 8003142:	4909      	ldr	r1, [pc, #36]	; (8003168 <siprintf+0x3c>)
 8003144:	f853 2b04 	ldr.w	r2, [r3], #4
 8003148:	9105      	str	r1, [sp, #20]
 800314a:	6800      	ldr	r0, [r0, #0]
 800314c:	a902      	add	r1, sp, #8
 800314e:	9301      	str	r3, [sp, #4]
 8003150:	f000 f868 	bl	8003224 <_svfiprintf_r>
 8003154:	2200      	movs	r2, #0
 8003156:	9b02      	ldr	r3, [sp, #8]
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	b01c      	add	sp, #112	; 0x70
 800315c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003160:	b003      	add	sp, #12
 8003162:	4770      	bx	lr
 8003164:	2000007c 	.word	0x2000007c
 8003168:	ffff0208 	.word	0xffff0208

0800316c <__ssputs_r>:
 800316c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003170:	688e      	ldr	r6, [r1, #8]
 8003172:	4682      	mov	sl, r0
 8003174:	429e      	cmp	r6, r3
 8003176:	460c      	mov	r4, r1
 8003178:	4690      	mov	r8, r2
 800317a:	461f      	mov	r7, r3
 800317c:	d838      	bhi.n	80031f0 <__ssputs_r+0x84>
 800317e:	898a      	ldrh	r2, [r1, #12]
 8003180:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003184:	d032      	beq.n	80031ec <__ssputs_r+0x80>
 8003186:	6825      	ldr	r5, [r4, #0]
 8003188:	6909      	ldr	r1, [r1, #16]
 800318a:	3301      	adds	r3, #1
 800318c:	eba5 0901 	sub.w	r9, r5, r1
 8003190:	6965      	ldr	r5, [r4, #20]
 8003192:	444b      	add	r3, r9
 8003194:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003198:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800319c:	106d      	asrs	r5, r5, #1
 800319e:	429d      	cmp	r5, r3
 80031a0:	bf38      	it	cc
 80031a2:	461d      	movcc	r5, r3
 80031a4:	0553      	lsls	r3, r2, #21
 80031a6:	d531      	bpl.n	800320c <__ssputs_r+0xa0>
 80031a8:	4629      	mov	r1, r5
 80031aa:	f000 fb53 	bl	8003854 <_malloc_r>
 80031ae:	4606      	mov	r6, r0
 80031b0:	b950      	cbnz	r0, 80031c8 <__ssputs_r+0x5c>
 80031b2:	230c      	movs	r3, #12
 80031b4:	f04f 30ff 	mov.w	r0, #4294967295
 80031b8:	f8ca 3000 	str.w	r3, [sl]
 80031bc:	89a3      	ldrh	r3, [r4, #12]
 80031be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031c2:	81a3      	strh	r3, [r4, #12]
 80031c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031c8:	464a      	mov	r2, r9
 80031ca:	6921      	ldr	r1, [r4, #16]
 80031cc:	f000 face 	bl	800376c <memcpy>
 80031d0:	89a3      	ldrh	r3, [r4, #12]
 80031d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031da:	81a3      	strh	r3, [r4, #12]
 80031dc:	6126      	str	r6, [r4, #16]
 80031de:	444e      	add	r6, r9
 80031e0:	6026      	str	r6, [r4, #0]
 80031e2:	463e      	mov	r6, r7
 80031e4:	6165      	str	r5, [r4, #20]
 80031e6:	eba5 0509 	sub.w	r5, r5, r9
 80031ea:	60a5      	str	r5, [r4, #8]
 80031ec:	42be      	cmp	r6, r7
 80031ee:	d900      	bls.n	80031f2 <__ssputs_r+0x86>
 80031f0:	463e      	mov	r6, r7
 80031f2:	4632      	mov	r2, r6
 80031f4:	4641      	mov	r1, r8
 80031f6:	6820      	ldr	r0, [r4, #0]
 80031f8:	f000 fac6 	bl	8003788 <memmove>
 80031fc:	68a3      	ldr	r3, [r4, #8]
 80031fe:	6822      	ldr	r2, [r4, #0]
 8003200:	1b9b      	subs	r3, r3, r6
 8003202:	4432      	add	r2, r6
 8003204:	2000      	movs	r0, #0
 8003206:	60a3      	str	r3, [r4, #8]
 8003208:	6022      	str	r2, [r4, #0]
 800320a:	e7db      	b.n	80031c4 <__ssputs_r+0x58>
 800320c:	462a      	mov	r2, r5
 800320e:	f000 fb7b 	bl	8003908 <_realloc_r>
 8003212:	4606      	mov	r6, r0
 8003214:	2800      	cmp	r0, #0
 8003216:	d1e1      	bne.n	80031dc <__ssputs_r+0x70>
 8003218:	4650      	mov	r0, sl
 800321a:	6921      	ldr	r1, [r4, #16]
 800321c:	f000 face 	bl	80037bc <_free_r>
 8003220:	e7c7      	b.n	80031b2 <__ssputs_r+0x46>
	...

08003224 <_svfiprintf_r>:
 8003224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003228:	4698      	mov	r8, r3
 800322a:	898b      	ldrh	r3, [r1, #12]
 800322c:	4607      	mov	r7, r0
 800322e:	061b      	lsls	r3, r3, #24
 8003230:	460d      	mov	r5, r1
 8003232:	4614      	mov	r4, r2
 8003234:	b09d      	sub	sp, #116	; 0x74
 8003236:	d50e      	bpl.n	8003256 <_svfiprintf_r+0x32>
 8003238:	690b      	ldr	r3, [r1, #16]
 800323a:	b963      	cbnz	r3, 8003256 <_svfiprintf_r+0x32>
 800323c:	2140      	movs	r1, #64	; 0x40
 800323e:	f000 fb09 	bl	8003854 <_malloc_r>
 8003242:	6028      	str	r0, [r5, #0]
 8003244:	6128      	str	r0, [r5, #16]
 8003246:	b920      	cbnz	r0, 8003252 <_svfiprintf_r+0x2e>
 8003248:	230c      	movs	r3, #12
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	f04f 30ff 	mov.w	r0, #4294967295
 8003250:	e0d1      	b.n	80033f6 <_svfiprintf_r+0x1d2>
 8003252:	2340      	movs	r3, #64	; 0x40
 8003254:	616b      	str	r3, [r5, #20]
 8003256:	2300      	movs	r3, #0
 8003258:	9309      	str	r3, [sp, #36]	; 0x24
 800325a:	2320      	movs	r3, #32
 800325c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003260:	2330      	movs	r3, #48	; 0x30
 8003262:	f04f 0901 	mov.w	r9, #1
 8003266:	f8cd 800c 	str.w	r8, [sp, #12]
 800326a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003410 <_svfiprintf_r+0x1ec>
 800326e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003272:	4623      	mov	r3, r4
 8003274:	469a      	mov	sl, r3
 8003276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800327a:	b10a      	cbz	r2, 8003280 <_svfiprintf_r+0x5c>
 800327c:	2a25      	cmp	r2, #37	; 0x25
 800327e:	d1f9      	bne.n	8003274 <_svfiprintf_r+0x50>
 8003280:	ebba 0b04 	subs.w	fp, sl, r4
 8003284:	d00b      	beq.n	800329e <_svfiprintf_r+0x7a>
 8003286:	465b      	mov	r3, fp
 8003288:	4622      	mov	r2, r4
 800328a:	4629      	mov	r1, r5
 800328c:	4638      	mov	r0, r7
 800328e:	f7ff ff6d 	bl	800316c <__ssputs_r>
 8003292:	3001      	adds	r0, #1
 8003294:	f000 80aa 	beq.w	80033ec <_svfiprintf_r+0x1c8>
 8003298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800329a:	445a      	add	r2, fp
 800329c:	9209      	str	r2, [sp, #36]	; 0x24
 800329e:	f89a 3000 	ldrb.w	r3, [sl]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80a2 	beq.w	80033ec <_svfiprintf_r+0x1c8>
 80032a8:	2300      	movs	r3, #0
 80032aa:	f04f 32ff 	mov.w	r2, #4294967295
 80032ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032b2:	f10a 0a01 	add.w	sl, sl, #1
 80032b6:	9304      	str	r3, [sp, #16]
 80032b8:	9307      	str	r3, [sp, #28]
 80032ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032be:	931a      	str	r3, [sp, #104]	; 0x68
 80032c0:	4654      	mov	r4, sl
 80032c2:	2205      	movs	r2, #5
 80032c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032c8:	4851      	ldr	r0, [pc, #324]	; (8003410 <_svfiprintf_r+0x1ec>)
 80032ca:	f000 fa41 	bl	8003750 <memchr>
 80032ce:	9a04      	ldr	r2, [sp, #16]
 80032d0:	b9d8      	cbnz	r0, 800330a <_svfiprintf_r+0xe6>
 80032d2:	06d0      	lsls	r0, r2, #27
 80032d4:	bf44      	itt	mi
 80032d6:	2320      	movmi	r3, #32
 80032d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032dc:	0711      	lsls	r1, r2, #28
 80032de:	bf44      	itt	mi
 80032e0:	232b      	movmi	r3, #43	; 0x2b
 80032e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032e6:	f89a 3000 	ldrb.w	r3, [sl]
 80032ea:	2b2a      	cmp	r3, #42	; 0x2a
 80032ec:	d015      	beq.n	800331a <_svfiprintf_r+0xf6>
 80032ee:	4654      	mov	r4, sl
 80032f0:	2000      	movs	r0, #0
 80032f2:	f04f 0c0a 	mov.w	ip, #10
 80032f6:	9a07      	ldr	r2, [sp, #28]
 80032f8:	4621      	mov	r1, r4
 80032fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032fe:	3b30      	subs	r3, #48	; 0x30
 8003300:	2b09      	cmp	r3, #9
 8003302:	d94e      	bls.n	80033a2 <_svfiprintf_r+0x17e>
 8003304:	b1b0      	cbz	r0, 8003334 <_svfiprintf_r+0x110>
 8003306:	9207      	str	r2, [sp, #28]
 8003308:	e014      	b.n	8003334 <_svfiprintf_r+0x110>
 800330a:	eba0 0308 	sub.w	r3, r0, r8
 800330e:	fa09 f303 	lsl.w	r3, r9, r3
 8003312:	4313      	orrs	r3, r2
 8003314:	46a2      	mov	sl, r4
 8003316:	9304      	str	r3, [sp, #16]
 8003318:	e7d2      	b.n	80032c0 <_svfiprintf_r+0x9c>
 800331a:	9b03      	ldr	r3, [sp, #12]
 800331c:	1d19      	adds	r1, r3, #4
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	9103      	str	r1, [sp, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	bfbb      	ittet	lt
 8003326:	425b      	neglt	r3, r3
 8003328:	f042 0202 	orrlt.w	r2, r2, #2
 800332c:	9307      	strge	r3, [sp, #28]
 800332e:	9307      	strlt	r3, [sp, #28]
 8003330:	bfb8      	it	lt
 8003332:	9204      	strlt	r2, [sp, #16]
 8003334:	7823      	ldrb	r3, [r4, #0]
 8003336:	2b2e      	cmp	r3, #46	; 0x2e
 8003338:	d10c      	bne.n	8003354 <_svfiprintf_r+0x130>
 800333a:	7863      	ldrb	r3, [r4, #1]
 800333c:	2b2a      	cmp	r3, #42	; 0x2a
 800333e:	d135      	bne.n	80033ac <_svfiprintf_r+0x188>
 8003340:	9b03      	ldr	r3, [sp, #12]
 8003342:	3402      	adds	r4, #2
 8003344:	1d1a      	adds	r2, r3, #4
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	9203      	str	r2, [sp, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	bfb8      	it	lt
 800334e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003352:	9305      	str	r3, [sp, #20]
 8003354:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003420 <_svfiprintf_r+0x1fc>
 8003358:	2203      	movs	r2, #3
 800335a:	4650      	mov	r0, sl
 800335c:	7821      	ldrb	r1, [r4, #0]
 800335e:	f000 f9f7 	bl	8003750 <memchr>
 8003362:	b140      	cbz	r0, 8003376 <_svfiprintf_r+0x152>
 8003364:	2340      	movs	r3, #64	; 0x40
 8003366:	eba0 000a 	sub.w	r0, r0, sl
 800336a:	fa03 f000 	lsl.w	r0, r3, r0
 800336e:	9b04      	ldr	r3, [sp, #16]
 8003370:	3401      	adds	r4, #1
 8003372:	4303      	orrs	r3, r0
 8003374:	9304      	str	r3, [sp, #16]
 8003376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800337a:	2206      	movs	r2, #6
 800337c:	4825      	ldr	r0, [pc, #148]	; (8003414 <_svfiprintf_r+0x1f0>)
 800337e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003382:	f000 f9e5 	bl	8003750 <memchr>
 8003386:	2800      	cmp	r0, #0
 8003388:	d038      	beq.n	80033fc <_svfiprintf_r+0x1d8>
 800338a:	4b23      	ldr	r3, [pc, #140]	; (8003418 <_svfiprintf_r+0x1f4>)
 800338c:	bb1b      	cbnz	r3, 80033d6 <_svfiprintf_r+0x1b2>
 800338e:	9b03      	ldr	r3, [sp, #12]
 8003390:	3307      	adds	r3, #7
 8003392:	f023 0307 	bic.w	r3, r3, #7
 8003396:	3308      	adds	r3, #8
 8003398:	9303      	str	r3, [sp, #12]
 800339a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800339c:	4433      	add	r3, r6
 800339e:	9309      	str	r3, [sp, #36]	; 0x24
 80033a0:	e767      	b.n	8003272 <_svfiprintf_r+0x4e>
 80033a2:	460c      	mov	r4, r1
 80033a4:	2001      	movs	r0, #1
 80033a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80033aa:	e7a5      	b.n	80032f8 <_svfiprintf_r+0xd4>
 80033ac:	2300      	movs	r3, #0
 80033ae:	f04f 0c0a 	mov.w	ip, #10
 80033b2:	4619      	mov	r1, r3
 80033b4:	3401      	adds	r4, #1
 80033b6:	9305      	str	r3, [sp, #20]
 80033b8:	4620      	mov	r0, r4
 80033ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033be:	3a30      	subs	r2, #48	; 0x30
 80033c0:	2a09      	cmp	r2, #9
 80033c2:	d903      	bls.n	80033cc <_svfiprintf_r+0x1a8>
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0c5      	beq.n	8003354 <_svfiprintf_r+0x130>
 80033c8:	9105      	str	r1, [sp, #20]
 80033ca:	e7c3      	b.n	8003354 <_svfiprintf_r+0x130>
 80033cc:	4604      	mov	r4, r0
 80033ce:	2301      	movs	r3, #1
 80033d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80033d4:	e7f0      	b.n	80033b8 <_svfiprintf_r+0x194>
 80033d6:	ab03      	add	r3, sp, #12
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	462a      	mov	r2, r5
 80033dc:	4638      	mov	r0, r7
 80033de:	4b0f      	ldr	r3, [pc, #60]	; (800341c <_svfiprintf_r+0x1f8>)
 80033e0:	a904      	add	r1, sp, #16
 80033e2:	f3af 8000 	nop.w
 80033e6:	1c42      	adds	r2, r0, #1
 80033e8:	4606      	mov	r6, r0
 80033ea:	d1d6      	bne.n	800339a <_svfiprintf_r+0x176>
 80033ec:	89ab      	ldrh	r3, [r5, #12]
 80033ee:	065b      	lsls	r3, r3, #25
 80033f0:	f53f af2c 	bmi.w	800324c <_svfiprintf_r+0x28>
 80033f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033f6:	b01d      	add	sp, #116	; 0x74
 80033f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033fc:	ab03      	add	r3, sp, #12
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	462a      	mov	r2, r5
 8003402:	4638      	mov	r0, r7
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <_svfiprintf_r+0x1f8>)
 8003406:	a904      	add	r1, sp, #16
 8003408:	f000 f87c 	bl	8003504 <_printf_i>
 800340c:	e7eb      	b.n	80033e6 <_svfiprintf_r+0x1c2>
 800340e:	bf00      	nop
 8003410:	08003a2e 	.word	0x08003a2e
 8003414:	08003a38 	.word	0x08003a38
 8003418:	00000000 	.word	0x00000000
 800341c:	0800316d 	.word	0x0800316d
 8003420:	08003a34 	.word	0x08003a34

08003424 <_printf_common>:
 8003424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003428:	4616      	mov	r6, r2
 800342a:	4699      	mov	r9, r3
 800342c:	688a      	ldr	r2, [r1, #8]
 800342e:	690b      	ldr	r3, [r1, #16]
 8003430:	4607      	mov	r7, r0
 8003432:	4293      	cmp	r3, r2
 8003434:	bfb8      	it	lt
 8003436:	4613      	movlt	r3, r2
 8003438:	6033      	str	r3, [r6, #0]
 800343a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800343e:	460c      	mov	r4, r1
 8003440:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003444:	b10a      	cbz	r2, 800344a <_printf_common+0x26>
 8003446:	3301      	adds	r3, #1
 8003448:	6033      	str	r3, [r6, #0]
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	0699      	lsls	r1, r3, #26
 800344e:	bf42      	ittt	mi
 8003450:	6833      	ldrmi	r3, [r6, #0]
 8003452:	3302      	addmi	r3, #2
 8003454:	6033      	strmi	r3, [r6, #0]
 8003456:	6825      	ldr	r5, [r4, #0]
 8003458:	f015 0506 	ands.w	r5, r5, #6
 800345c:	d106      	bne.n	800346c <_printf_common+0x48>
 800345e:	f104 0a19 	add.w	sl, r4, #25
 8003462:	68e3      	ldr	r3, [r4, #12]
 8003464:	6832      	ldr	r2, [r6, #0]
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	42ab      	cmp	r3, r5
 800346a:	dc28      	bgt.n	80034be <_printf_common+0x9a>
 800346c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003470:	1e13      	subs	r3, r2, #0
 8003472:	6822      	ldr	r2, [r4, #0]
 8003474:	bf18      	it	ne
 8003476:	2301      	movne	r3, #1
 8003478:	0692      	lsls	r2, r2, #26
 800347a:	d42d      	bmi.n	80034d8 <_printf_common+0xb4>
 800347c:	4649      	mov	r1, r9
 800347e:	4638      	mov	r0, r7
 8003480:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003484:	47c0      	blx	r8
 8003486:	3001      	adds	r0, #1
 8003488:	d020      	beq.n	80034cc <_printf_common+0xa8>
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	68e5      	ldr	r5, [r4, #12]
 800348e:	f003 0306 	and.w	r3, r3, #6
 8003492:	2b04      	cmp	r3, #4
 8003494:	bf18      	it	ne
 8003496:	2500      	movne	r5, #0
 8003498:	6832      	ldr	r2, [r6, #0]
 800349a:	f04f 0600 	mov.w	r6, #0
 800349e:	68a3      	ldr	r3, [r4, #8]
 80034a0:	bf08      	it	eq
 80034a2:	1aad      	subeq	r5, r5, r2
 80034a4:	6922      	ldr	r2, [r4, #16]
 80034a6:	bf08      	it	eq
 80034a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034ac:	4293      	cmp	r3, r2
 80034ae:	bfc4      	itt	gt
 80034b0:	1a9b      	subgt	r3, r3, r2
 80034b2:	18ed      	addgt	r5, r5, r3
 80034b4:	341a      	adds	r4, #26
 80034b6:	42b5      	cmp	r5, r6
 80034b8:	d11a      	bne.n	80034f0 <_printf_common+0xcc>
 80034ba:	2000      	movs	r0, #0
 80034bc:	e008      	b.n	80034d0 <_printf_common+0xac>
 80034be:	2301      	movs	r3, #1
 80034c0:	4652      	mov	r2, sl
 80034c2:	4649      	mov	r1, r9
 80034c4:	4638      	mov	r0, r7
 80034c6:	47c0      	blx	r8
 80034c8:	3001      	adds	r0, #1
 80034ca:	d103      	bne.n	80034d4 <_printf_common+0xb0>
 80034cc:	f04f 30ff 	mov.w	r0, #4294967295
 80034d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034d4:	3501      	adds	r5, #1
 80034d6:	e7c4      	b.n	8003462 <_printf_common+0x3e>
 80034d8:	2030      	movs	r0, #48	; 0x30
 80034da:	18e1      	adds	r1, r4, r3
 80034dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034e6:	4422      	add	r2, r4
 80034e8:	3302      	adds	r3, #2
 80034ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034ee:	e7c5      	b.n	800347c <_printf_common+0x58>
 80034f0:	2301      	movs	r3, #1
 80034f2:	4622      	mov	r2, r4
 80034f4:	4649      	mov	r1, r9
 80034f6:	4638      	mov	r0, r7
 80034f8:	47c0      	blx	r8
 80034fa:	3001      	adds	r0, #1
 80034fc:	d0e6      	beq.n	80034cc <_printf_common+0xa8>
 80034fe:	3601      	adds	r6, #1
 8003500:	e7d9      	b.n	80034b6 <_printf_common+0x92>
	...

08003504 <_printf_i>:
 8003504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003508:	460c      	mov	r4, r1
 800350a:	7e27      	ldrb	r7, [r4, #24]
 800350c:	4691      	mov	r9, r2
 800350e:	2f78      	cmp	r7, #120	; 0x78
 8003510:	4680      	mov	r8, r0
 8003512:	469a      	mov	sl, r3
 8003514:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003516:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800351a:	d807      	bhi.n	800352c <_printf_i+0x28>
 800351c:	2f62      	cmp	r7, #98	; 0x62
 800351e:	d80a      	bhi.n	8003536 <_printf_i+0x32>
 8003520:	2f00      	cmp	r7, #0
 8003522:	f000 80d9 	beq.w	80036d8 <_printf_i+0x1d4>
 8003526:	2f58      	cmp	r7, #88	; 0x58
 8003528:	f000 80a4 	beq.w	8003674 <_printf_i+0x170>
 800352c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003530:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003534:	e03a      	b.n	80035ac <_printf_i+0xa8>
 8003536:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800353a:	2b15      	cmp	r3, #21
 800353c:	d8f6      	bhi.n	800352c <_printf_i+0x28>
 800353e:	a001      	add	r0, pc, #4	; (adr r0, 8003544 <_printf_i+0x40>)
 8003540:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003544:	0800359d 	.word	0x0800359d
 8003548:	080035b1 	.word	0x080035b1
 800354c:	0800352d 	.word	0x0800352d
 8003550:	0800352d 	.word	0x0800352d
 8003554:	0800352d 	.word	0x0800352d
 8003558:	0800352d 	.word	0x0800352d
 800355c:	080035b1 	.word	0x080035b1
 8003560:	0800352d 	.word	0x0800352d
 8003564:	0800352d 	.word	0x0800352d
 8003568:	0800352d 	.word	0x0800352d
 800356c:	0800352d 	.word	0x0800352d
 8003570:	080036bf 	.word	0x080036bf
 8003574:	080035e1 	.word	0x080035e1
 8003578:	080036a1 	.word	0x080036a1
 800357c:	0800352d 	.word	0x0800352d
 8003580:	0800352d 	.word	0x0800352d
 8003584:	080036e1 	.word	0x080036e1
 8003588:	0800352d 	.word	0x0800352d
 800358c:	080035e1 	.word	0x080035e1
 8003590:	0800352d 	.word	0x0800352d
 8003594:	0800352d 	.word	0x0800352d
 8003598:	080036a9 	.word	0x080036a9
 800359c:	680b      	ldr	r3, [r1, #0]
 800359e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80035a2:	1d1a      	adds	r2, r3, #4
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	600a      	str	r2, [r1, #0]
 80035a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035ac:	2301      	movs	r3, #1
 80035ae:	e0a4      	b.n	80036fa <_printf_i+0x1f6>
 80035b0:	6825      	ldr	r5, [r4, #0]
 80035b2:	6808      	ldr	r0, [r1, #0]
 80035b4:	062e      	lsls	r6, r5, #24
 80035b6:	f100 0304 	add.w	r3, r0, #4
 80035ba:	d50a      	bpl.n	80035d2 <_printf_i+0xce>
 80035bc:	6805      	ldr	r5, [r0, #0]
 80035be:	600b      	str	r3, [r1, #0]
 80035c0:	2d00      	cmp	r5, #0
 80035c2:	da03      	bge.n	80035cc <_printf_i+0xc8>
 80035c4:	232d      	movs	r3, #45	; 0x2d
 80035c6:	426d      	negs	r5, r5
 80035c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035cc:	230a      	movs	r3, #10
 80035ce:	485e      	ldr	r0, [pc, #376]	; (8003748 <_printf_i+0x244>)
 80035d0:	e019      	b.n	8003606 <_printf_i+0x102>
 80035d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80035d6:	6805      	ldr	r5, [r0, #0]
 80035d8:	600b      	str	r3, [r1, #0]
 80035da:	bf18      	it	ne
 80035dc:	b22d      	sxthne	r5, r5
 80035de:	e7ef      	b.n	80035c0 <_printf_i+0xbc>
 80035e0:	680b      	ldr	r3, [r1, #0]
 80035e2:	6825      	ldr	r5, [r4, #0]
 80035e4:	1d18      	adds	r0, r3, #4
 80035e6:	6008      	str	r0, [r1, #0]
 80035e8:	0628      	lsls	r0, r5, #24
 80035ea:	d501      	bpl.n	80035f0 <_printf_i+0xec>
 80035ec:	681d      	ldr	r5, [r3, #0]
 80035ee:	e002      	b.n	80035f6 <_printf_i+0xf2>
 80035f0:	0669      	lsls	r1, r5, #25
 80035f2:	d5fb      	bpl.n	80035ec <_printf_i+0xe8>
 80035f4:	881d      	ldrh	r5, [r3, #0]
 80035f6:	2f6f      	cmp	r7, #111	; 0x6f
 80035f8:	bf0c      	ite	eq
 80035fa:	2308      	moveq	r3, #8
 80035fc:	230a      	movne	r3, #10
 80035fe:	4852      	ldr	r0, [pc, #328]	; (8003748 <_printf_i+0x244>)
 8003600:	2100      	movs	r1, #0
 8003602:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003606:	6866      	ldr	r6, [r4, #4]
 8003608:	2e00      	cmp	r6, #0
 800360a:	bfa8      	it	ge
 800360c:	6821      	ldrge	r1, [r4, #0]
 800360e:	60a6      	str	r6, [r4, #8]
 8003610:	bfa4      	itt	ge
 8003612:	f021 0104 	bicge.w	r1, r1, #4
 8003616:	6021      	strge	r1, [r4, #0]
 8003618:	b90d      	cbnz	r5, 800361e <_printf_i+0x11a>
 800361a:	2e00      	cmp	r6, #0
 800361c:	d04d      	beq.n	80036ba <_printf_i+0x1b6>
 800361e:	4616      	mov	r6, r2
 8003620:	fbb5 f1f3 	udiv	r1, r5, r3
 8003624:	fb03 5711 	mls	r7, r3, r1, r5
 8003628:	5dc7      	ldrb	r7, [r0, r7]
 800362a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800362e:	462f      	mov	r7, r5
 8003630:	42bb      	cmp	r3, r7
 8003632:	460d      	mov	r5, r1
 8003634:	d9f4      	bls.n	8003620 <_printf_i+0x11c>
 8003636:	2b08      	cmp	r3, #8
 8003638:	d10b      	bne.n	8003652 <_printf_i+0x14e>
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	07df      	lsls	r7, r3, #31
 800363e:	d508      	bpl.n	8003652 <_printf_i+0x14e>
 8003640:	6923      	ldr	r3, [r4, #16]
 8003642:	6861      	ldr	r1, [r4, #4]
 8003644:	4299      	cmp	r1, r3
 8003646:	bfde      	ittt	le
 8003648:	2330      	movle	r3, #48	; 0x30
 800364a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800364e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003652:	1b92      	subs	r2, r2, r6
 8003654:	6122      	str	r2, [r4, #16]
 8003656:	464b      	mov	r3, r9
 8003658:	4621      	mov	r1, r4
 800365a:	4640      	mov	r0, r8
 800365c:	f8cd a000 	str.w	sl, [sp]
 8003660:	aa03      	add	r2, sp, #12
 8003662:	f7ff fedf 	bl	8003424 <_printf_common>
 8003666:	3001      	adds	r0, #1
 8003668:	d14c      	bne.n	8003704 <_printf_i+0x200>
 800366a:	f04f 30ff 	mov.w	r0, #4294967295
 800366e:	b004      	add	sp, #16
 8003670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003674:	4834      	ldr	r0, [pc, #208]	; (8003748 <_printf_i+0x244>)
 8003676:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800367a:	680e      	ldr	r6, [r1, #0]
 800367c:	6823      	ldr	r3, [r4, #0]
 800367e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003682:	061f      	lsls	r7, r3, #24
 8003684:	600e      	str	r6, [r1, #0]
 8003686:	d514      	bpl.n	80036b2 <_printf_i+0x1ae>
 8003688:	07d9      	lsls	r1, r3, #31
 800368a:	bf44      	itt	mi
 800368c:	f043 0320 	orrmi.w	r3, r3, #32
 8003690:	6023      	strmi	r3, [r4, #0]
 8003692:	b91d      	cbnz	r5, 800369c <_printf_i+0x198>
 8003694:	6823      	ldr	r3, [r4, #0]
 8003696:	f023 0320 	bic.w	r3, r3, #32
 800369a:	6023      	str	r3, [r4, #0]
 800369c:	2310      	movs	r3, #16
 800369e:	e7af      	b.n	8003600 <_printf_i+0xfc>
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	f043 0320 	orr.w	r3, r3, #32
 80036a6:	6023      	str	r3, [r4, #0]
 80036a8:	2378      	movs	r3, #120	; 0x78
 80036aa:	4828      	ldr	r0, [pc, #160]	; (800374c <_printf_i+0x248>)
 80036ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036b0:	e7e3      	b.n	800367a <_printf_i+0x176>
 80036b2:	065e      	lsls	r6, r3, #25
 80036b4:	bf48      	it	mi
 80036b6:	b2ad      	uxthmi	r5, r5
 80036b8:	e7e6      	b.n	8003688 <_printf_i+0x184>
 80036ba:	4616      	mov	r6, r2
 80036bc:	e7bb      	b.n	8003636 <_printf_i+0x132>
 80036be:	680b      	ldr	r3, [r1, #0]
 80036c0:	6826      	ldr	r6, [r4, #0]
 80036c2:	1d1d      	adds	r5, r3, #4
 80036c4:	6960      	ldr	r0, [r4, #20]
 80036c6:	600d      	str	r5, [r1, #0]
 80036c8:	0635      	lsls	r5, r6, #24
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	d501      	bpl.n	80036d2 <_printf_i+0x1ce>
 80036ce:	6018      	str	r0, [r3, #0]
 80036d0:	e002      	b.n	80036d8 <_printf_i+0x1d4>
 80036d2:	0671      	lsls	r1, r6, #25
 80036d4:	d5fb      	bpl.n	80036ce <_printf_i+0x1ca>
 80036d6:	8018      	strh	r0, [r3, #0]
 80036d8:	2300      	movs	r3, #0
 80036da:	4616      	mov	r6, r2
 80036dc:	6123      	str	r3, [r4, #16]
 80036de:	e7ba      	b.n	8003656 <_printf_i+0x152>
 80036e0:	680b      	ldr	r3, [r1, #0]
 80036e2:	1d1a      	adds	r2, r3, #4
 80036e4:	600a      	str	r2, [r1, #0]
 80036e6:	681e      	ldr	r6, [r3, #0]
 80036e8:	2100      	movs	r1, #0
 80036ea:	4630      	mov	r0, r6
 80036ec:	6862      	ldr	r2, [r4, #4]
 80036ee:	f000 f82f 	bl	8003750 <memchr>
 80036f2:	b108      	cbz	r0, 80036f8 <_printf_i+0x1f4>
 80036f4:	1b80      	subs	r0, r0, r6
 80036f6:	6060      	str	r0, [r4, #4]
 80036f8:	6863      	ldr	r3, [r4, #4]
 80036fa:	6123      	str	r3, [r4, #16]
 80036fc:	2300      	movs	r3, #0
 80036fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003702:	e7a8      	b.n	8003656 <_printf_i+0x152>
 8003704:	4632      	mov	r2, r6
 8003706:	4649      	mov	r1, r9
 8003708:	4640      	mov	r0, r8
 800370a:	6923      	ldr	r3, [r4, #16]
 800370c:	47d0      	blx	sl
 800370e:	3001      	adds	r0, #1
 8003710:	d0ab      	beq.n	800366a <_printf_i+0x166>
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	079b      	lsls	r3, r3, #30
 8003716:	d413      	bmi.n	8003740 <_printf_i+0x23c>
 8003718:	68e0      	ldr	r0, [r4, #12]
 800371a:	9b03      	ldr	r3, [sp, #12]
 800371c:	4298      	cmp	r0, r3
 800371e:	bfb8      	it	lt
 8003720:	4618      	movlt	r0, r3
 8003722:	e7a4      	b.n	800366e <_printf_i+0x16a>
 8003724:	2301      	movs	r3, #1
 8003726:	4632      	mov	r2, r6
 8003728:	4649      	mov	r1, r9
 800372a:	4640      	mov	r0, r8
 800372c:	47d0      	blx	sl
 800372e:	3001      	adds	r0, #1
 8003730:	d09b      	beq.n	800366a <_printf_i+0x166>
 8003732:	3501      	adds	r5, #1
 8003734:	68e3      	ldr	r3, [r4, #12]
 8003736:	9903      	ldr	r1, [sp, #12]
 8003738:	1a5b      	subs	r3, r3, r1
 800373a:	42ab      	cmp	r3, r5
 800373c:	dcf2      	bgt.n	8003724 <_printf_i+0x220>
 800373e:	e7eb      	b.n	8003718 <_printf_i+0x214>
 8003740:	2500      	movs	r5, #0
 8003742:	f104 0619 	add.w	r6, r4, #25
 8003746:	e7f5      	b.n	8003734 <_printf_i+0x230>
 8003748:	08003a3f 	.word	0x08003a3f
 800374c:	08003a50 	.word	0x08003a50

08003750 <memchr>:
 8003750:	4603      	mov	r3, r0
 8003752:	b510      	push	{r4, lr}
 8003754:	b2c9      	uxtb	r1, r1
 8003756:	4402      	add	r2, r0
 8003758:	4293      	cmp	r3, r2
 800375a:	4618      	mov	r0, r3
 800375c:	d101      	bne.n	8003762 <memchr+0x12>
 800375e:	2000      	movs	r0, #0
 8003760:	e003      	b.n	800376a <memchr+0x1a>
 8003762:	7804      	ldrb	r4, [r0, #0]
 8003764:	3301      	adds	r3, #1
 8003766:	428c      	cmp	r4, r1
 8003768:	d1f6      	bne.n	8003758 <memchr+0x8>
 800376a:	bd10      	pop	{r4, pc}

0800376c <memcpy>:
 800376c:	440a      	add	r2, r1
 800376e:	4291      	cmp	r1, r2
 8003770:	f100 33ff 	add.w	r3, r0, #4294967295
 8003774:	d100      	bne.n	8003778 <memcpy+0xc>
 8003776:	4770      	bx	lr
 8003778:	b510      	push	{r4, lr}
 800377a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800377e:	4291      	cmp	r1, r2
 8003780:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003784:	d1f9      	bne.n	800377a <memcpy+0xe>
 8003786:	bd10      	pop	{r4, pc}

08003788 <memmove>:
 8003788:	4288      	cmp	r0, r1
 800378a:	b510      	push	{r4, lr}
 800378c:	eb01 0402 	add.w	r4, r1, r2
 8003790:	d902      	bls.n	8003798 <memmove+0x10>
 8003792:	4284      	cmp	r4, r0
 8003794:	4623      	mov	r3, r4
 8003796:	d807      	bhi.n	80037a8 <memmove+0x20>
 8003798:	1e43      	subs	r3, r0, #1
 800379a:	42a1      	cmp	r1, r4
 800379c:	d008      	beq.n	80037b0 <memmove+0x28>
 800379e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037a6:	e7f8      	b.n	800379a <memmove+0x12>
 80037a8:	4601      	mov	r1, r0
 80037aa:	4402      	add	r2, r0
 80037ac:	428a      	cmp	r2, r1
 80037ae:	d100      	bne.n	80037b2 <memmove+0x2a>
 80037b0:	bd10      	pop	{r4, pc}
 80037b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037ba:	e7f7      	b.n	80037ac <memmove+0x24>

080037bc <_free_r>:
 80037bc:	b538      	push	{r3, r4, r5, lr}
 80037be:	4605      	mov	r5, r0
 80037c0:	2900      	cmp	r1, #0
 80037c2:	d043      	beq.n	800384c <_free_r+0x90>
 80037c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037c8:	1f0c      	subs	r4, r1, #4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	bfb8      	it	lt
 80037ce:	18e4      	addlt	r4, r4, r3
 80037d0:	f000 f8d0 	bl	8003974 <__malloc_lock>
 80037d4:	4a1e      	ldr	r2, [pc, #120]	; (8003850 <_free_r+0x94>)
 80037d6:	6813      	ldr	r3, [r2, #0]
 80037d8:	4610      	mov	r0, r2
 80037da:	b933      	cbnz	r3, 80037ea <_free_r+0x2e>
 80037dc:	6063      	str	r3, [r4, #4]
 80037de:	6014      	str	r4, [r2, #0]
 80037e0:	4628      	mov	r0, r5
 80037e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037e6:	f000 b8cb 	b.w	8003980 <__malloc_unlock>
 80037ea:	42a3      	cmp	r3, r4
 80037ec:	d90a      	bls.n	8003804 <_free_r+0x48>
 80037ee:	6821      	ldr	r1, [r4, #0]
 80037f0:	1862      	adds	r2, r4, r1
 80037f2:	4293      	cmp	r3, r2
 80037f4:	bf01      	itttt	eq
 80037f6:	681a      	ldreq	r2, [r3, #0]
 80037f8:	685b      	ldreq	r3, [r3, #4]
 80037fa:	1852      	addeq	r2, r2, r1
 80037fc:	6022      	streq	r2, [r4, #0]
 80037fe:	6063      	str	r3, [r4, #4]
 8003800:	6004      	str	r4, [r0, #0]
 8003802:	e7ed      	b.n	80037e0 <_free_r+0x24>
 8003804:	461a      	mov	r2, r3
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	b10b      	cbz	r3, 800380e <_free_r+0x52>
 800380a:	42a3      	cmp	r3, r4
 800380c:	d9fa      	bls.n	8003804 <_free_r+0x48>
 800380e:	6811      	ldr	r1, [r2, #0]
 8003810:	1850      	adds	r0, r2, r1
 8003812:	42a0      	cmp	r0, r4
 8003814:	d10b      	bne.n	800382e <_free_r+0x72>
 8003816:	6820      	ldr	r0, [r4, #0]
 8003818:	4401      	add	r1, r0
 800381a:	1850      	adds	r0, r2, r1
 800381c:	4283      	cmp	r3, r0
 800381e:	6011      	str	r1, [r2, #0]
 8003820:	d1de      	bne.n	80037e0 <_free_r+0x24>
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	4401      	add	r1, r0
 8003828:	6011      	str	r1, [r2, #0]
 800382a:	6053      	str	r3, [r2, #4]
 800382c:	e7d8      	b.n	80037e0 <_free_r+0x24>
 800382e:	d902      	bls.n	8003836 <_free_r+0x7a>
 8003830:	230c      	movs	r3, #12
 8003832:	602b      	str	r3, [r5, #0]
 8003834:	e7d4      	b.n	80037e0 <_free_r+0x24>
 8003836:	6820      	ldr	r0, [r4, #0]
 8003838:	1821      	adds	r1, r4, r0
 800383a:	428b      	cmp	r3, r1
 800383c:	bf01      	itttt	eq
 800383e:	6819      	ldreq	r1, [r3, #0]
 8003840:	685b      	ldreq	r3, [r3, #4]
 8003842:	1809      	addeq	r1, r1, r0
 8003844:	6021      	streq	r1, [r4, #0]
 8003846:	6063      	str	r3, [r4, #4]
 8003848:	6054      	str	r4, [r2, #4]
 800384a:	e7c9      	b.n	80037e0 <_free_r+0x24>
 800384c:	bd38      	pop	{r3, r4, r5, pc}
 800384e:	bf00      	nop
 8003850:	20000134 	.word	0x20000134

08003854 <_malloc_r>:
 8003854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003856:	1ccd      	adds	r5, r1, #3
 8003858:	f025 0503 	bic.w	r5, r5, #3
 800385c:	3508      	adds	r5, #8
 800385e:	2d0c      	cmp	r5, #12
 8003860:	bf38      	it	cc
 8003862:	250c      	movcc	r5, #12
 8003864:	2d00      	cmp	r5, #0
 8003866:	4606      	mov	r6, r0
 8003868:	db01      	blt.n	800386e <_malloc_r+0x1a>
 800386a:	42a9      	cmp	r1, r5
 800386c:	d903      	bls.n	8003876 <_malloc_r+0x22>
 800386e:	230c      	movs	r3, #12
 8003870:	6033      	str	r3, [r6, #0]
 8003872:	2000      	movs	r0, #0
 8003874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003876:	f000 f87d 	bl	8003974 <__malloc_lock>
 800387a:	4921      	ldr	r1, [pc, #132]	; (8003900 <_malloc_r+0xac>)
 800387c:	680a      	ldr	r2, [r1, #0]
 800387e:	4614      	mov	r4, r2
 8003880:	b99c      	cbnz	r4, 80038aa <_malloc_r+0x56>
 8003882:	4f20      	ldr	r7, [pc, #128]	; (8003904 <_malloc_r+0xb0>)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	b923      	cbnz	r3, 8003892 <_malloc_r+0x3e>
 8003888:	4621      	mov	r1, r4
 800388a:	4630      	mov	r0, r6
 800388c:	f000 f862 	bl	8003954 <_sbrk_r>
 8003890:	6038      	str	r0, [r7, #0]
 8003892:	4629      	mov	r1, r5
 8003894:	4630      	mov	r0, r6
 8003896:	f000 f85d 	bl	8003954 <_sbrk_r>
 800389a:	1c43      	adds	r3, r0, #1
 800389c:	d123      	bne.n	80038e6 <_malloc_r+0x92>
 800389e:	230c      	movs	r3, #12
 80038a0:	4630      	mov	r0, r6
 80038a2:	6033      	str	r3, [r6, #0]
 80038a4:	f000 f86c 	bl	8003980 <__malloc_unlock>
 80038a8:	e7e3      	b.n	8003872 <_malloc_r+0x1e>
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	1b5b      	subs	r3, r3, r5
 80038ae:	d417      	bmi.n	80038e0 <_malloc_r+0x8c>
 80038b0:	2b0b      	cmp	r3, #11
 80038b2:	d903      	bls.n	80038bc <_malloc_r+0x68>
 80038b4:	6023      	str	r3, [r4, #0]
 80038b6:	441c      	add	r4, r3
 80038b8:	6025      	str	r5, [r4, #0]
 80038ba:	e004      	b.n	80038c6 <_malloc_r+0x72>
 80038bc:	6863      	ldr	r3, [r4, #4]
 80038be:	42a2      	cmp	r2, r4
 80038c0:	bf0c      	ite	eq
 80038c2:	600b      	streq	r3, [r1, #0]
 80038c4:	6053      	strne	r3, [r2, #4]
 80038c6:	4630      	mov	r0, r6
 80038c8:	f000 f85a 	bl	8003980 <__malloc_unlock>
 80038cc:	f104 000b 	add.w	r0, r4, #11
 80038d0:	1d23      	adds	r3, r4, #4
 80038d2:	f020 0007 	bic.w	r0, r0, #7
 80038d6:	1ac2      	subs	r2, r0, r3
 80038d8:	d0cc      	beq.n	8003874 <_malloc_r+0x20>
 80038da:	1a1b      	subs	r3, r3, r0
 80038dc:	50a3      	str	r3, [r4, r2]
 80038de:	e7c9      	b.n	8003874 <_malloc_r+0x20>
 80038e0:	4622      	mov	r2, r4
 80038e2:	6864      	ldr	r4, [r4, #4]
 80038e4:	e7cc      	b.n	8003880 <_malloc_r+0x2c>
 80038e6:	1cc4      	adds	r4, r0, #3
 80038e8:	f024 0403 	bic.w	r4, r4, #3
 80038ec:	42a0      	cmp	r0, r4
 80038ee:	d0e3      	beq.n	80038b8 <_malloc_r+0x64>
 80038f0:	1a21      	subs	r1, r4, r0
 80038f2:	4630      	mov	r0, r6
 80038f4:	f000 f82e 	bl	8003954 <_sbrk_r>
 80038f8:	3001      	adds	r0, #1
 80038fa:	d1dd      	bne.n	80038b8 <_malloc_r+0x64>
 80038fc:	e7cf      	b.n	800389e <_malloc_r+0x4a>
 80038fe:	bf00      	nop
 8003900:	20000134 	.word	0x20000134
 8003904:	20000138 	.word	0x20000138

08003908 <_realloc_r>:
 8003908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390a:	4607      	mov	r7, r0
 800390c:	4614      	mov	r4, r2
 800390e:	460e      	mov	r6, r1
 8003910:	b921      	cbnz	r1, 800391c <_realloc_r+0x14>
 8003912:	4611      	mov	r1, r2
 8003914:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003918:	f7ff bf9c 	b.w	8003854 <_malloc_r>
 800391c:	b922      	cbnz	r2, 8003928 <_realloc_r+0x20>
 800391e:	f7ff ff4d 	bl	80037bc <_free_r>
 8003922:	4625      	mov	r5, r4
 8003924:	4628      	mov	r0, r5
 8003926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003928:	f000 f830 	bl	800398c <_malloc_usable_size_r>
 800392c:	42a0      	cmp	r0, r4
 800392e:	d20f      	bcs.n	8003950 <_realloc_r+0x48>
 8003930:	4621      	mov	r1, r4
 8003932:	4638      	mov	r0, r7
 8003934:	f7ff ff8e 	bl	8003854 <_malloc_r>
 8003938:	4605      	mov	r5, r0
 800393a:	2800      	cmp	r0, #0
 800393c:	d0f2      	beq.n	8003924 <_realloc_r+0x1c>
 800393e:	4631      	mov	r1, r6
 8003940:	4622      	mov	r2, r4
 8003942:	f7ff ff13 	bl	800376c <memcpy>
 8003946:	4631      	mov	r1, r6
 8003948:	4638      	mov	r0, r7
 800394a:	f7ff ff37 	bl	80037bc <_free_r>
 800394e:	e7e9      	b.n	8003924 <_realloc_r+0x1c>
 8003950:	4635      	mov	r5, r6
 8003952:	e7e7      	b.n	8003924 <_realloc_r+0x1c>

08003954 <_sbrk_r>:
 8003954:	b538      	push	{r3, r4, r5, lr}
 8003956:	2300      	movs	r3, #0
 8003958:	4d05      	ldr	r5, [pc, #20]	; (8003970 <_sbrk_r+0x1c>)
 800395a:	4604      	mov	r4, r0
 800395c:	4608      	mov	r0, r1
 800395e:	602b      	str	r3, [r5, #0]
 8003960:	f7fd fafe 	bl	8000f60 <_sbrk>
 8003964:	1c43      	adds	r3, r0, #1
 8003966:	d102      	bne.n	800396e <_sbrk_r+0x1a>
 8003968:	682b      	ldr	r3, [r5, #0]
 800396a:	b103      	cbz	r3, 800396e <_sbrk_r+0x1a>
 800396c:	6023      	str	r3, [r4, #0]
 800396e:	bd38      	pop	{r3, r4, r5, pc}
 8003970:	200001dc 	.word	0x200001dc

08003974 <__malloc_lock>:
 8003974:	4801      	ldr	r0, [pc, #4]	; (800397c <__malloc_lock+0x8>)
 8003976:	f000 b811 	b.w	800399c <__retarget_lock_acquire_recursive>
 800397a:	bf00      	nop
 800397c:	200001e4 	.word	0x200001e4

08003980 <__malloc_unlock>:
 8003980:	4801      	ldr	r0, [pc, #4]	; (8003988 <__malloc_unlock+0x8>)
 8003982:	f000 b80c 	b.w	800399e <__retarget_lock_release_recursive>
 8003986:	bf00      	nop
 8003988:	200001e4 	.word	0x200001e4

0800398c <_malloc_usable_size_r>:
 800398c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003990:	1f18      	subs	r0, r3, #4
 8003992:	2b00      	cmp	r3, #0
 8003994:	bfbc      	itt	lt
 8003996:	580b      	ldrlt	r3, [r1, r0]
 8003998:	18c0      	addlt	r0, r0, r3
 800399a:	4770      	bx	lr

0800399c <__retarget_lock_acquire_recursive>:
 800399c:	4770      	bx	lr

0800399e <__retarget_lock_release_recursive>:
 800399e:	4770      	bx	lr

080039a0 <_init>:
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a2:	bf00      	nop
 80039a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a6:	bc08      	pop	{r3}
 80039a8:	469e      	mov	lr, r3
 80039aa:	4770      	bx	lr

080039ac <_fini>:
 80039ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ae:	bf00      	nop
 80039b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039b2:	bc08      	pop	{r3}
 80039b4:	469e      	mov	lr, r3
 80039b6:	4770      	bx	lr
